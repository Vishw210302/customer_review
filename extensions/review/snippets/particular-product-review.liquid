{% assign product_id = product.id %}
{% assign shop_name = shop.metafields.shopName.shopName %}
{{ 'particular-product-review.css' | asset_url | stylesheet_tag }}

<div class="rating-container">
  <div class="rating-summary">
    <span class="rating-label">{{ 'ratings.stars.label' | t }}</span>
    <div class="stars-container" id="stars-container">
      {%- for i in (1..5) -%}
        <span class="star empty" aria-hidden="true" data-star-index="{{ i }}">☆</span>
      {%- endfor -%}
    </div>
    <span class="rating-count" id="rating-count">({{ product.metafields.reviews.rating_count | default: 0 }})</span>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const starsContainer = document.getElementById('stars-container');
    const ratingCountElement = document.getElementById('rating-count');

    const GET_REVIEWS_API = `https://checklist.codecrewinfotech.com/api/getReview/{{ shop_name }}/{{ product_id }}`;
    const GET_RATING_CONFIG_API = `https://c14f59ca361f.ngrok-free.app/api/ratingConfig/{{ shop_name }}`;
    fetchRatingConfig();

    async function fetchRatingConfig() {
      try {
        const response = await fetch(GET_RATING_CONFIG_API, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': 'abcdefg',
            'ngrok-skip-browser-warning': 'true',
          },
        });
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const configData = await response.json();
        const dataOfConfig = configData?.data;
        applyRatingConfig(dataOfConfig);

        fetchReviews();
      } catch (error) {
        console.error('Error fetching rating config:', error);
        fetchReviews();
      }
    }

    function applyRatingConfig(dataOfConfig) {
      const ratingContainer = document.querySelector('.rating-container');
      const ratingSummary = document.querySelector('.rating-summary');
      const ratingLabel = document.querySelector('.rating-label');
      const starsContainer = document.querySelector('.stars-container');
      const ratingCount = document.querySelector('.rating-count');

      if (ratingContainer) {
        ratingContainer.style.padding = dataOfConfig?.padding || '12px';
        ratingContainer.style.textAlign = dataOfConfig?.alignment || 'center';
      }

      if (ratingSummary) {
        ratingSummary.style.gap = dataOfConfig?.gap || '8px';
        if (dataOfConfig?.alignment === 'center') {
          ratingSummary.style.justifyContent = 'center';
        } else if (dataOfConfig?.alignment === 'left') {
          ratingSummary.style.justifyContent = 'left';
        } else {
          ratingSummary.style.justifyContent = 'right';
        }
      }

      if (ratingLabel) {
        ratingLabel.textContent = dataOfConfig?.titleText || 'Customer Rating';
        ratingLabel.style.color = dataOfConfig?.titleColor || '#2d3748';
        ratingLabel.style.fontSize = dataOfConfig?.titleFontSize || '15px';
        ratingLabel.style.fontWeight = dataOfConfig?.titleWeight || '600';
      }

      const stars = document.querySelectorAll('.star');
      stars.forEach((star) => {
        star.style.fontSize = dataOfConfig?.starSize || '20px';
      });

      if (ratingCount) {
        ratingCount.style.color = dataOfConfig?.countColor || '#4a5568';
        ratingCount.style.fontSize = dataOfConfig?.countFontSize || '14px';
        ratingCount.style.fontWeight = dataOfConfig?.countWeight || '500';
      }

      const style = document.createElement('style');
      style.textContent = `
        .star.filled {
          color: ${dataOfConfig?.starColor || '#ff9d2d'} !important;
          text-shadow: 0 0 1px rgba(255, 215, 0, 0.4);
        }
        .star.empty {
          color: ${dataOfConfig?.emptyStarColor || '#d1d5db'} !important;
        }
        .star.partial {
          color: ${dataOfConfig?.emptyStarColor || '#d1d5db'} !important;
        }
        .star.partial::before {
          color: ${dataOfConfig?.starColor || '#ff9d2d'} !important;
        }
      `;
      document.head.appendChild(style);
    }

    async function fetchReviews() {
      try {
        const response = await fetch(GET_REVIEWS_API, {
          method: 'GET',
          headers: {
            Accept: 'application/json',
            'ngrok-skip-browser-warning': 'true',
          },
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        updateRatingSummary(data);
      } catch (error) {
        console.error('Error fetching reviews:', error);
      }
    }

    function updateRatingSummary(data) {
      const averageRating = data.averageRating || 0;
      const stars = document.querySelectorAll('.star');

      stars.forEach((star, index) => {
        const starValue = index + 1;

        if (starValue <= Math.floor(averageRating)) {
          star.className = 'star filled';
          star.textContent = '★';
        } else if (starValue === Math.ceil(averageRating) && averageRating % 1 !== 0) {
          star.className = 'star partial';
          star.textContent = '☆';
          const percentFilled = (averageRating % 1) * 100;
          star.style.setProperty('--percent-filled', `${percentFilled}%`);
        } else {
          star.className = 'star empty';
          star.textContent = '☆';
        }
      });

      const reviewCount = data.totalReviews || data.reviews.length || 0;
      ratingCountElement.textContent = `(${reviewCount})`;
    }
  });
</script>
