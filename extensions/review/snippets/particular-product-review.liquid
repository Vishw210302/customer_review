{% assign rating = product.metafields.reviews.rating_value | default: 0 %}
{% assign product_id = product.id %}

<div class="rating-container">
  <div class="rating-summary">
    <span class="rating-label">{{ 'ratings.stars.label' | t }}</span>
    <div class="stars-container" id="stars-container">
      {%- for i in (1..5) -%}
        <span class="star empty" aria-hidden="true" data-star-index="{{ i }}">☆</span>
      {%- endfor -%}
    </div>
    <span class="rating-count" id="rating-count">({{ product.metafields.reviews.rating_count | default: 0 }})</span>
  </div>
</div>

<style>
  .rating-summary {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .rating-label {
    font-weight: 600;
    color: #2d3748;
    letter-spacing: 0.01em;
    font-size: 15px;
  }

  .stars-container {
    display: inline-flex;
    position: relative;
    padding: 2px 0;
  }

  .star {
    font-size: 20px;
    padding: 0 2px;
    position: relative;
  }

  .star.filled {
    color: #ff9d2d;
    text-shadow: 0 0 1px rgba(255, 215, 0, 0.4);
  }

  .star.empty {
    color: #d1d5db;
  }

  .star.partial {
    position: relative;
    color: #d1d5db;
  }

  .star.partial::before {
    content: '★';
    position: absolute;
    left: 2px;
    top: 0;
    color: #ff9d2d;
    overflow: hidden;
    width: var(--percent-filled);
  }

  .rating-count {
    color: #4a5568;
    font-size: 14px;
    font-weight: 500;
    background-color: #edf2f7;
    padding: 3px 8px;
    border-radius: 12px;
    transition: background-color 0.2s ease;
  }

  .rating-container:hover .rating-count {
    background-color: #e2e8f0;
  }

  .reviews-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 16px;
    color: #4a5568;
    font-size: 14px;
    font-weight: 500;
  }

  .reviews-loading::after {
    content: '';
    display: inline-block;
    width: 18px;
    height: 18px;
    margin-left: 10px;
    border: 2px solid rgba(79, 70, 229, 0.2);
    border-radius: 50%;
    border-top-color: #4f46e5;
    animation: spin 0.8s linear infinite;
  }

  .no-reviews-message {
    padding: 16px;
    text-align: center;
    color: #4a5568;
    font-size: 14px;
    background-color: #f8f9fa;
    border-radius: 8px;
    border-left: 3px solid #e53e3e;
  }

  .review-item {
    padding: 16px;
    border-bottom: 1px solid #e2e8f0;
    margin-bottom: 12px;
  }

  .review-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 8px;
  }

  .review-author {
    font-weight: 600;
    color: #2d3748;
  }

  .review-date {
    color: #718096;
    font-size: 14px;
  }

  .review-rating {
    margin-bottom: 8px;
    color: #ffd700;
  }

  .review-content {
    color: #4a5568;
    line-height: 1.5;
  }

  .write-review-btn {
    display: inline-block;
    margin-top: 16px;
    padding: 8px 16px;
    background-color: #4f46e5;
    color: white;
    font-weight: 500;
    border-radius: 6px;
    text-decoration: none;
    transition: background-color 0.2s ease;
  }

  .write-review-btn:hover {
    background-color: #4338ca;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  @media (max-width: 768px) {
    .rating-container {
      flex-direction: column;
      align-items: flex-start;
      gap: 12px;
      padding: 12px;
    }

    .rating-summary {
      width: 100%;
      justify-content: space-between;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const starsContainer = document.getElementById('stars-container');
    const ratingCountElement = document.getElementById('rating-count');

    const GET_REVIEWS_API = `https://82ce-117-98-157-98.ngrok-free.app/api/getReview/{{ product_id }}`;

    fetchReviews();

    async function fetchReviews() {
      try {
        const response = await fetch(GET_REVIEWS_API, {
          method: 'GET',
          headers: {
            Accept: 'application/json',
            'ngrok-skip-browser-warning': 'true',
          },
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        updateRatingSummary(data);
        {% comment %} renderReviews(data.reviews); {% endcomment %}
      } catch (error) {
        console.error('Error fetching reviews:', error);
      }
    }

    function updateRatingSummary(data) {
      const averageRating = data.averageRating || 0;
      const stars = document.querySelectorAll('.star');

      stars.forEach((star, index) => {
        const starValue = index + 1;

        if (starValue <= Math.floor(averageRating)) {
          // Full star
          star.className = 'star filled';
          star.textContent = '★';
        } else if (starValue === Math.ceil(averageRating) && averageRating % 1 !== 0) {
          // Partial star
          star.className = 'star partial';
          star.textContent = '☆';
          const percentFilled = (averageRating % 1) * 100;
          star.style.setProperty('--percent-filled', `${percentFilled}%`);
        } else {
          // Empty star
          star.className = 'star empty';
          star.textContent = '☆';
        }
      });

      const reviewCount = data.totalReviews || data.reviews.length || 0;
      ratingCountElement.textContent = `(${reviewCount})`;
    }
  });
</script>
