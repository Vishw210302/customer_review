{% assign shop_name = shop.metafields.shopName.shopName %}

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    position: relative;
  }

  .store-rating {
    width: 3%;
    position: fixed;
    right: 0;
    top: 50%;
    transform: translateY(-50%);
    background-color: #fff;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    z-index: 100;
    cursor: pointer;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .store-rating:hover {
    transform: translateY(-50%) scale(1.05);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.15);
  }

  .average-store-rating {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .rating-store-value {
    font-size: 18px;
    font-weight: bold;
    color: #333;
  }

  .stars-store-container {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .store-stars {
    color: #ff9d2d;
    font-size: 24px;
  }

  .review-store-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    z-index: 1000;
    justify-content: center;
    align-items: center;
    backdrop-filter: blur(5px);
  }

  .review-store-modal-content {
    max-height: 80vh;
    overflow-y: auto;
    scrollbar-width: none;
    background-color: white;
    width: 600px;
    max-width: 90%;
    border-radius: 20px;
    padding: 40px;
    box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);
    position: relative;
    animation: reviewModalFadeIn 0.5s cubic-bezier(0.19, 1, 0.22, 1);
  }

  .review-store-modal-content::-webkit-scrollbar {
    width: 6px;
  }

  .review-store-modal-content::-webkit-scrollbar-thumb {
    background-color: #d1d1d1;
    border-radius: 10px;
  }

  @keyframes reviewModalFadeIn {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .review-close-store-modal {
    position: absolute;
    right: 20px;
    top: 20px;
    font-size: 24px;
    cursor: pointer;
    color: #999;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: all 0.25s ease;
  }

  .review-modal-store-title {
    margin: 0 0 8px 0;
    text-align: center;
    font-size: 28px;
    color: #222;
    font-weight: 700;
  }

  .review-modal-store-description {
    margin: 0;
    text-align: center;
    font-size: 16px;
    color: #666;
  }

  .review-rating-store-label {
    display: block;
    text-align: center;
    color: #ff9d2d;
    margin: 0;
    font-size: 24px;
    line-height: 1;
  }

  .review-add-store-review-btn {
    display: block;
    width: 100%;
    padding: 16px;
    background-color: #4a90e2;
    color: white;
    border: none;
    border-radius: 12px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    margin: 20px 0;
    transition: all 0.3s ease;
    box-shadow: 0 4px 12px rgba(74, 144, 226, 0.2);
  }

  .review-add-store-review-btn:hover {
    background-color: #3a80d2;
    box-shadow: 0 8px 15px rgba(74, 144, 226, 0.3);
    transform: translateY(-3px);
  }

  .review-store-form {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.6s ease, opacity 0.6s ease;
    opacity: 0;
  }

  .review-store-form.review-open {
    max-height: 1200px;
    opacity: 1;
    margin-top: 25px;
  }

  .review-form-store-group {
    margin-bottom: 24px;
  }

  .review-form-store-group label {
    display: block;
    margin-bottom: 10px;
    font-weight: 600;
    color: #333;
    font-size: 15px;
  }

  .review-form-store-group input,
  .review-form-store-group textarea {
    width: 100%;
    padding: 14px 18px;
    border: 1px solid #ddd;
    border-radius: 12px;
    font-family: inherit;
    box-sizing: border-box;
    font-size: 15px;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
  }

  .review-form-store-group input:focus,
  .review-form-store-group textarea:focus {
    outline: none;
    border-color: #4a90e2;
    box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.2);
  }

  .review-form-store-group textarea {
    min-height: 140px;
    resize: vertical;
  }

  .review-buttons-store-container {
    display: flex;
    justify-content: space-between;
    gap: 15px;
    margin-bottom: 20px;
    margin-top: 20px;
  }

  .review-cancel-btn,
  .review-submit-btn {
    padding: 14px 20px;
    border-radius: 12px;
    cursor: pointer;
    font-size: 16px;
    font-weight: 600;
    flex: 1;
    transition: all 0.3s ease;
  }

  .review-cancel-btn {
    background-color: #f5f5f5;
    border: 1px solid #e0e0e0;
    color: #555;
  }

  .review-cancel-btn:hover {
    background-color: #e8e8e8;
    transform: translateY(-2px);
  }

  .review-submit-btn {
    background-color: #4caf50;
    border: none;
    color: white;
    box-shadow: 0 4px 12px rgba(76, 175, 80, 0.2);
  }

  .review-submit-btn:hover {
    background-color: #45a049;
    box-shadow: 0 8px 15px rgba(76, 175, 80, 0.3);
    transform: translateY(-2px);
  }

  .review-file-input {
    display: none;
  }

  .review-user-rating {
    display: flex;
    justify-content: center;
    margin-bottom: 30px;
  }

  .review-emoji-rating {
    font-size: 38px;
    cursor: pointer;
    opacity: 0.4;
    transition: all 0.3s ease;
    margin: 0 8px;
    filter: grayscale(100%);
    transform-origin: center;
  }

  .review-emoji-rating.review-active {
    opacity: 1;
    filter: grayscale(0%);
    transform: scale(1.2);
  }

  .review-emoji-rating:hover {
    transform: scale(1.3);
    opacity: 0.8;
    filter: grayscale(30%);
  }

  .emoji-tooltip {
    position: absolute;
    background-color: #333;
    color: white;
    padding: 5px 10px;
    border-radius: 5px;
    font-size: 12px;
    bottom: -25px;
    left: 50%;
    transform: translateX(-50%);
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
    white-space: nowrap;
  }

  .emoji-rating-container {
    position: relative;
  }

  .emoji-rating-container:hover .emoji-tooltip {
    opacity: 1;
  }

  .review-submission-message {
    text-align: center;
    margin-top: 25px;
    padding: 18px;
    border-radius: 12px;
    display: none;
    font-weight: 500;
    animation: messageFadeIn 0.5s ease;
  }

  @keyframes messageFadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .review-submission-success {
    background-color: #e8f5e9;
    color: #2e7d32;
    border: 1px solid #c8e6c9;
  }

  .review-submission-error {
    background-color: #ffebee;
    color: #c62828;
    border: 1px solid #ffcdd2;
  }

  .input-container {
    position: relative;
  }

  .input-highlight {
    position: absolute;
    bottom: 0;
    left: 0;
    height: 2px;
    width: 0;
    background-color: #4a90e2;
    transition: width 0.3s ease;
  }

  .review-form-store-group input:focus + .input-highlight,
  .review-form-store-group textarea:focus + .input-highlight {
    width: 100%;
  }

  .progress-bar {
    height: 100%;
    background-color: #4a90e2;
    width: 0%;
    transition: width 0.3s ease;
  }

  .char-count {
    font-size: 12px;
    color: #999;
    text-align: right;
    margin-top: 5px;
  }

  .invalid-input {
    border-color: #ff3860 !important;
  }

  .error-message {
    color: #ff3860;
    font-size: 12px;
    margin-top: 5px;
  }

  @keyframes checkmarkDraw {
    0% {
      stroke-dashoffset: 100;
    }
    100% {
      stroke-dashoffset: 0;
    }
  }

  .success-checkmark {
    display: none;
    text-align: center;
    margin: 20px auto;
  }

  .success-checkmark svg {
    width: 80px;
    height: 80px;
  }

  .success-checkmark path {
    stroke: #4caf50;
    stroke-width: 2;
    stroke-dasharray: 100;
    stroke-dashoffset: 100;
    animation: checkmarkDraw 1s ease forwards;
  }

  .review-upload-container {
    display: flex;
    justify-content: center;
  }

  .review-file-label {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 16px 24px;
    background-color: #f8f9fa;
    border: 2px dashed #cbd5e0;
    border-radius: 12px;
    cursor: pointer;
    font-weight: 600;
    font-size: 16px;
    color: #4a5568;
    transition: all 0.25s ease;
    width: 100%;
    max-width: 320px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  }

  .review-file-label:hover {
    background-color: #edf2f7;
    border-color: #a0aec0;
    transform: translateY(-3px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .review-file-label:active {
    transform: translateY(0px);
  }

  .review-file-icon {
    margin-right: 12px;
    transition: all 0.25s ease;
  }

  .review-file-label:hover .review-file-icon {
    transform: scale(1.1);
  }

  .review-file-input {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    border: 0;
  }

  .review-file-name {
    display: block;
    margin-top: 10px;
    font-size: 14px;
    color: #4a5568;
    max-width: 320px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .review-thumbnails {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 10px;
  }

  .review-image-store {
    display: flex;
    justify-content: center;
  }

  .review-thumbnail {
    position: relative;
    width: 80px;
    height: 80px;
    border-radius: 4px;
    overflow: hidden;
    border: 1px solid #ddd;
  }

  .review-thumbnail img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .review-thumbnail-remove {
    position: absolute;
    top: 0;
    right: 0;
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 12px;
  }

  .review-upload-container {
    margin-top: 15px;
  }

  .review-file-label {
    display: inline-flex;
    align-items: center;
    background-color: #f5f5f5;
    padding: 8px 12px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.3s;
  }

  .review-file-label:hover {
    background-color: #e0e0e0;
  }

  .review-file-icon {
    margin-right: 8px;
  }

  .review-file-input {
    display: none;
  }

  .review-file-name {
    margin-left: 10px;
    font-size: 14px;
    color: #666;
  }

  .review-thumbnail:hover .review-thumbnail-remove {
    opacity: 1;
  }

  .main-card-review-content {
    display: flex;
    flex-wrap: wrap;
    gap: 1.33%;
    width: 100%;
  }

  .card-store-review {
    width: 49%;
    background: white;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    border-radius: 12px;
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    margin-bottom: 15px;
  }

  .card-store-review:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);
  }

  .review-container {
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  .reviewer-details {
    flex: 1;
  }

  .main-div-review {
    padding: 5px 15px;
  }

  .reviewer-name {
    font-weight: 600;
    color: #333;
    margin-bottom: 2px;
    font-size: 14px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .reviewer-email {
    font-size: 13px;
    color: #888;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .review-rating {
    margin-bottom: 8px;
  }

  .stars {
    color: #ffc107;
    font-size: 16px;
  }

  .review-title {
    font-weight: 600;
    font-size: 15px;
    margin-bottom: 6px;
    color: #333;
  }

  .review-message {
    color: #555;
    font-size: 13px;
    line-height: 1.5;
    margin-bottom: 10px;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .review-images {
    display: flex;
    overflow-x: auto;
    gap: 8px;
    padding: 10px 15px;
    -ms-overflow-style: none;
    scrollbar-width: thin;
    cursor: pointer;
  }

  .review-images::-webkit-scrollbar {
    display: none;
  }

  .review-images img {
    height: 100px;
    min-width: 100px;
    object-fit: cover;
    border-radius: 6px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    cursor: 'pointer';
  }

  .review-footer {
    padding: 8px 15px;
    background-color: #f8f9fa;
    border-top: 1px solid #eee;
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: auto;
  }

  .review-date {
    color: #777;
    font-size: 12px;
  }

  .loading-reviews {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .review-pagination-container {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 20px;
    padding: 10px 0;
  }

  .review-pagination {
    display: flex;
    align-items: center;
    background-color: #f8f9fa;
    border-radius: 25px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }

  .page-btn {
    background-color: transparent;
    border: none;
    color: #333;
    padding: 10px 15px;
    cursor: pointer;
    transition: background-color 0.3s ease, color 0.3s ease;
    font-size: 18px;
    font-weight: bold;
  }

  .page-btn:hover {
    background-color: #e9ecef;
  }

  .page-btn:disabled {
    color: #aaa;
    cursor: not-allowed;
  }

  .page-numbers {
    display: flex;
    align-items: center;
    gap: 5px;
    padding: 0 15px;
  }

  .current-page {
    font-weight: bold;
    color: #007bff;
    font-size: 16px;
  }

  .total-pages {
    color: #6c757d;
    font-size: 14px;
  }

  @media (max-width: 480px) {
    .review-pagination {
      scale: 0.9;
    }
  }

  @media (max-width: 1200px) {
    .card-store-review {
      width: 32%;
    }
    .main-card-review-content {
      gap: 2%;
    }
  }

  @media (max-width: 900px) {
    .card-store-review {
      width: 49%;
    }
    .main-card-review-content {
      gap: 2%;
    }
  }

  @media (max-width: 600px) {
    .card-store-review {
      width: 100%;
    }
  }
</style>

<div class="container">
  <div class="store-rating" id="storeRating">
    <div class="average-store-rating">
      <div class="stars-store-container">
        <span class="store-stars">★</span>
        <span class="store-stars">★</span>
        <span class="store-stars">★</span>
        <span class="store-stars">★</span>
        <span class="store-stars">★</span>
      </div>
      <span class="rating-store-value"></span>
    </div>
  </div>
</div>

<div class="review-store-modal" id="reviewModal">
  <div class="review-store-modal-content">
    <span class="review-close-store-modal" id="closeModal" aria-label="Close modal">&times;</span>
    <h2 class="review-modal-store-title">Customer Reviews</h2>
    <p class="review-modal-store-description"></p>
    <div class="review-rating-store-label"></div>

    <button class="review-add-store-review-btn" id="addReviewBtn">Share Your Experience</button>

    <div class="review-store-form" id="reviewForm">
      <div class="form-progress">
        <div class="progress-bar" id="formProgress"></div>
      </div>

      <div class="review-user-rating">
        <div class="emoji-rating-container">
          <span class="review-emoji-rating" data-value="1">😞</span>
          <span class="emoji-tooltip">Very Disappointed</span>
        </div>
        <div class="emoji-rating-container">
          <span class="review-emoji-rating" data-value="2">😕</span>
          <span class="emoji-tooltip">Not Great</span>
        </div>
        <div class="emoji-rating-container">
          <span class="review-emoji-rating" data-value="3">😐</span>
          <span class="emoji-tooltip">Acceptable</span>
        </div>
        <div class="emoji-rating-container">
          <span class="review-emoji-rating" data-value="4">😊</span>
          <span class="emoji-tooltip">Good Experience</span>
        </div>
        <div class="emoji-rating-container">
          <span class="review-emoji-rating" data-value="5">😍</span>
          <span class="emoji-tooltip">Excellent!</span>
        </div>
      </div>

      <div class="review-form-store-group">
        <label for="customerName">Full Name</label>
        <div class="input-container">
          <input type="text" id="customerName" placeholder="Enter your name" aria-required="true">
          <div class="input-highlight"></div>
        </div>
        <div class="error-message" id="nameError"></div>
      </div>
      <input type="hidden" id="storeName" name="storeName" value="{{ shop_name }}">
      <div class="review-form-store-group">
        <label for="customerEmail">Email Address</label>
        <div class="input-container">
          <input type="email" id="customerEmail" placeholder="Enter your email" aria-required="true">
          <div class="input-highlight"></div>
        </div>
        <div class="error-message" id="emailError"></div>
      </div>

      <div class="review-form-store-group">
        <label for="reviewTitle">Review Title</label>
        <div class="input-container">
          <input type="text" id="reviewTitle" placeholder="Summarize your experience in a few words">
          <div class="input-highlight"></div>
        </div>
      </div>

      <div class="review-form-store-group">
        <label for="reviewMessage">Your Review</label>
        <div class="input-container">
          <textarea id="reviewMessage" placeholder="Share details about your experience with our store"></textarea>
          <div class="input-highlight"></div>
        </div>
        <div class="char-count" id="charCount">0/1000</div>
      </div>

      <div class="review-upload-container">
        <label for="reviewImage" class="review-file-label">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="20"
            height="20"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="review-file-icon"
          >
            <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
            <circle cx="8.5" cy="8.5" r="1.5"></circle>
            <polyline points="21 15 16 10 5 21"></polyline>
          </svg>
          Add Photos
        </label>
      </div>
      <div class="review-image-store">
        <input type="file" id="reviewImage" class="review-file-input" accept="image/*" multiple>
        <span class="review-file-name" id="fileName"></span>
      </div>
      <div class="review-thumbnails" id="reviewThumbnails">
        <!-- Thumbnails will be added here dynamically -->
      </div>

      <div class="success-checkmark" id="successCheckmark">
        <svg viewBox="0 0 52 52">
          <circle cx="26" cy="26" r="25" fill="none" stroke="#4caf50" stroke-width="2"/>
          <path d="M14.1 27.2l7.1 7.2 16.7-16.8" fill="none" stroke="#4caf50" stroke-width="2"/>
        </svg>
      </div>

      <div class="review-submission-message" id="submissionMessage"></div>

      <div class="review-buttons-store-container">
        <button class="review-cancel-btn" id="cancelBtn">Cancel</button>
        <button class="review-submit-btn" id="submitBtn">Submit Review</button>
      </div>
    </div>

    <div class="main-card-review-content">
      <div class="card-store-review">
        {% comment %} Here All Data Comes {% endcomment %}
      </div>
    </div>
    <div class="review-pagination-container">
      <div class="review-pagination">
        <button class="page-btn prev-page" aria-label="Previous Page">&lsaquo;</button>

        <div class="page-numbers">
          <span class="current-page">1</span>
          <span class="total-pages">of 5</span>
        </div>

        <button class="page-btn next-page" aria-label="Next Page">&rsaquo;</button>
      </div>
    </div>
  </div>
</div>

<script>
  const storeRating = document.getElementById('storeRating');
  const reviewModal = document.getElementById('reviewModal');
  const closeModal = document.getElementById('closeModal');
  const addReviewBtn = document.getElementById('addReviewBtn');
  const reviewForm = document.getElementById('reviewForm');
  const cancelBtn = document.getElementById('cancelBtn');
  const reviewImage = document.getElementById('reviewImage');
  const fileName = document.getElementById('fileName');
  const emojis = document.querySelectorAll('.review-emoji-rating');
  const submissionMessage = document.getElementById('submissionMessage');
  const submitBtn = document.getElementById('submitBtn');
  const formProgress = document.getElementById('formProgress');
  const charCount = document.getElementById('charCount');
  const reviewMessage = document.getElementById('reviewMessage');
  const nameError = document.getElementById('nameError');
  const emailError = document.getElementById('emailError');
  const customerName = document.getElementById('customerName');
  const storeName = document.getElementById('storeName');
  const customerEmail = document.getElementById('customerEmail');
  const successCheckmark = document.getElementById('successCheckmark');
  const thumbnailsContainer = document.getElementById('reviewThumbnails');
  const mainCardReviewContent = document.querySelector('.main-card-review-content');
  const API_BASE_URL = 'https://9441-27-57-160-255.ngrok-free.app';
  const ADD_STORE_REVIEW_API = `${API_BASE_URL}/api/storeReview`;
  let userRating = 0;
  let formFields = [
    { element: customerName, filled: false },
    { element: storeName, filled: true },
    { element: customerEmail, filled: false },
    { element: document.getElementById('reviewTitle'), filled: false },
    { element: reviewMessage, filled: false },
  ];

  let selectedFiles = [];
  let currentPage = 1;
  let totalPages = 1;
  let isLoading = false;

  document.addEventListener('DOMContentLoaded', () => {
    const cardReviewContent = document.querySelector('.card-store-review');
    const firstPageBtn = document.querySelector('.first-page');
    const prevPageBtn = document.querySelector('.prev-page');
    const nextPageBtn = document.querySelector('.next-page');
    const lastPageBtn = document.querySelector('.last-page');
    const currentPageSpan = document.querySelector('.current-page');
    const totalPagesSpan = document.querySelector('.total-pages');

    function updatePagination(data) {
      if (!data) return;

      if (data.totalPages) {
        totalPages = data.totalPages;
      }

      if (firstPageBtn) {
        firstPageBtn.disabled = currentPage === 1;
      }
      if (prevPageBtn) {
        prevPageBtn.disabled = currentPage === 1;
      }
      if (nextPageBtn) {
        nextPageBtn.disabled = currentPage === totalPages;
      }
      if (lastPageBtn) {
        lastPageBtn.disabled = currentPage === totalPages;
      }

      if (currentPageSpan) {
        currentPageSpan.textContent = currentPage;
      }
      if (totalPagesSpan) {
        totalPagesSpan.textContent = `of ${totalPages}`;
      }
    }

    function fetchReviewsForPage(apiUrl) {
      if (isLoading) return;

      if (!mainCardReviewContent) return;

      mainCardReviewContent.innerHTML = '<div class="loading-reviews">Loading reviews...</div>';
      isLoading = true;

      fetch(apiUrl, {
        method: 'GET',
        headers: {
          'ngrok-skip-browser-warning': true,
          'Content-Type': 'application/json',
        },
      })
        .then((response) => {
          if (!response.ok) {
            console.error('Server response:', response.status, response.statusText);
            throw new Error(`Server responded with status: ${response.status}`);
          }
          return response.json();
        })
        .then((data) => {
          displayReview(data);
          updatePagination(data);
          isLoading = false;
        })
        .catch((error) => {
          console.error('Error fetching reviews:', error);
          mainCardReviewContent.innerHTML = `<div class="error-message">Failed to load reviews: ${error.message}. Please try again later.</div>`;
          isLoading = false;
        });
    }

    if (firstPageBtn) {
      firstPageBtn.addEventListener('click', () => {
        if (isLoading) return;
        currentPage = 1;
        const GET_STORE_REVIEW_API = `${API_BASE_URL}/api/storeReview/{{ shop_name }}?active=true&page=${currentPage}`;
        fetchReviewsForPage(GET_STORE_REVIEW_API);
      });
    }

    if (prevPageBtn) {
      prevPageBtn.addEventListener('click', () => {
        if (isLoading || currentPage <= 1) return;
        currentPage--;
        const GET_STORE_REVIEW_API = `${API_BASE_URL}/api/storeReview/{{ shop_name }}?active=true&page=${currentPage}`;
        fetchReviewsForPage(GET_STORE_REVIEW_API);
      });
    }

    if (nextPageBtn) {
      nextPageBtn.addEventListener('click', () => {
        if (isLoading || currentPage >= totalPages) return;
        currentPage++;
        const GET_STORE_REVIEW_API = `${API_BASE_URL}/api/storeReview/{{ shop_name }}?active=true&page=${currentPage}`;
        fetchReviewsForPage(GET_STORE_REVIEW_API);
      });
    }

    if (lastPageBtn) {
      lastPageBtn.addEventListener('click', () => {
        if (isLoading) return;
        currentPage = totalPages;
        const GET_STORE_REVIEW_API = `${API_BASE_URL}/api/storeReview/{{ shop_name }}?active=true&page=${currentPage}`;
        fetchReviewsForPage(GET_STORE_REVIEW_API);
      });
    }

    const GET_STORE_REVIEW_API = `${API_BASE_URL}/api/storeReview/{{ shop_name }}?active=true&page=1`;
    fetchReviewsForPage(GET_STORE_REVIEW_API);

    setupEventListeners();
  });

  function setupEventListeners() {
    if (formFields.every((field) => field.element)) {
      formFields.forEach((field) => {
        field.element.addEventListener('input', () => {
          field.filled = field.element.value.trim() !== '';
          updateFormProgress();
        });
      });
    }

    if (reviewMessage) {
      reviewMessage.addEventListener('input', () => {
        const count = reviewMessage.value.length;
        charCount.textContent = `${count}/1000`;

        if (count > 1000) {
          charCount.style.color = '#ff3860';
        } else {
          charCount.style.color = '#999';
        }
      });
    }

    if (storeRating) {
      storeRating.addEventListener('click', () => {
        reviewModal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
      });
    }

    if (closeModal) {
      closeModal.addEventListener('click', () => {
        closeReviewModal();
      });
    }

    if (reviewModal) {
      window.addEventListener('click', (e) => {
        if (e.target === reviewModal) {
          closeReviewModal();
        }
      });

      reviewModal.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          closeReviewModal();
        }
      });
    }

    if (addReviewBtn) {
      addReviewBtn.addEventListener('click', () => {
        reviewForm.classList.toggle('review-open');
        if (reviewForm.classList.contains('review-open')) {
          addReviewBtn.textContent = 'Cancel Review';
          addReviewBtn.style.backgroundColor = '#f44336';
        } else {
          addReviewBtn.textContent = 'Share Your Experience';
          addReviewBtn.style.backgroundColor = '#4a90e2';
        }
      });
    }

    if (cancelBtn) {
      cancelBtn.addEventListener('click', () => {
        reviewForm.classList.remove('review-open');
        addReviewBtn.textContent = 'Share Your Experience';
        addReviewBtn.style.backgroundColor = '#4a90e2';
        resetForm();
      });
    }

    if (emojis && emojis.length > 0) {
      emojis.forEach((emoji) => {
        emoji.addEventListener('mouseover', () => {
          const value = emoji.getAttribute('data-value');
          highlightEmojis(value);
        });

        emoji.addEventListener('mouseout', () => {
          resetEmojis();
          if (userRating > 0) {
            highlightEmojis(userRating);
          }
        });

        emoji.addEventListener('click', () => {
          const value = emoji.getAttribute('data-value');
          userRating = value;
          selectEmoji(value);
          updateFormProgress();
        });

        emoji.setAttribute('tabindex', '0');
        emoji.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            const value = emoji.getAttribute('data-value');
            userRating = value;
            selectEmoji(value);
            updateFormProgress();
          }
        });
      });
    }

    if (reviewImage) {
      reviewImage.addEventListener('change', function (e) {
        const fileInput = e.target;

        if (fileInput.files.length > 0) {
          Array.from(fileInput.files).forEach((file) => {
            if (file.type.startsWith('image/')) {
              selectedFiles.push(file);
            }
          });

          updateFileDisplay();
        }

        fileInput.value = '';
      });
    }

    if (submitBtn) {
      const freshSubmitBtn = submitBtn.cloneNode(true);
      submitBtn.parentNode.replaceChild(freshSubmitBtn, submitBtn);

      document.getElementById('submitBtn').addEventListener('click', submitReview);
    }
  }

  function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  function updateFormProgress() {
    if (!formProgress) return;

    const totalFields = formFields.length + (userRating > 0 ? 1 : 0);
    const filledFields = formFields.filter((field) => field.filled).length + (userRating > 0 ? 1 : 0);
    const progress = Math.min((filledFields / totalFields) * 100, 100);
    formProgress.style.width = `${progress}%`;
  }

  function resetEmojis() {
    if (!emojis) return;

    emojis.forEach((e) => {
      e.classList.remove('review-active');
    });
  }

  function highlightEmojis(value) {
    if (!emojis) return;

    emojis.forEach((e) => {
      if (parseInt(e.getAttribute('data-value')) <= parseInt(value)) {
        e.classList.add('review-active');
      } else {
        e.classList.remove('review-active');
      }
    });
  }

  function selectEmoji(value) {
    resetEmojis();

    if (!emojis) return;

    emojis.forEach((e) => {
      if (parseInt(e.getAttribute('data-value')) <= parseInt(value)) {
        e.classList.add('review-active');
      }
    });
  }

  function resetForm() {
    userRating = 0;
    resetEmojis();

    formFields.forEach((field) => {
      if (field.element) {
        field.element.value = '';
        field.filled = false;
        field.element.classList.remove('invalid-input');
      }
    });

    if (reviewImage) {
      reviewImage.value = '';
    }

    selectedFiles = [];

    if (fileName) {
      fileName.textContent = '';
    }

    if (thumbnailsContainer) {
      thumbnailsContainer.innerHTML = '';
    }

    if (submissionMessage) {
      submissionMessage.style.display = 'none';
    }

    if (nameError) {
      nameError.textContent = '';
    }

    if (emailError) {
      emailError.textContent = '';
    }

    if (charCount) {
      charCount.textContent = '0/1000';
    }

    updateFormProgress();

    const formControls = document.querySelectorAll('.review-form-store-group');
    if (formControls) {
      formControls.forEach((element) => {
        element.style.display = 'block';
      });
    }

    if (successCheckmark) {
      successCheckmark.style.display = 'none';
    }
  }

  function closeReviewModal() {
    if (!reviewModal) return;

    reviewModal.style.display = 'none';
    document.body.style.overflow = '';
    resetForm();

    if (reviewForm) {
      reviewForm.classList.remove('review-open');
    }

    if (addReviewBtn) {
      addReviewBtn.textContent = 'Share Your Experience';
      addReviewBtn.style.backgroundColor = '#4a90e2';
    }
  }

  function showSubmissionMessage(message, isSuccess) {
    if (!submissionMessage) return;

    submissionMessage.textContent = message;
    submissionMessage.style.display = 'block';

    if (isSuccess) {
      submissionMessage.className = 'review-submission-message review-submission-success';
    } else {
      submissionMessage.className = 'review-submission-message review-submission-error';
    }
  }

  function displayReview(data) {
    if (!mainCardReviewContent) return;

    mainCardReviewContent.innerHTML = '';

    if (!data.reviews || !Array.isArray(data.reviews) || data.reviews.length === 0) {
      mainCardReviewContent.innerHTML = '<div class="no-reviews-message">No reviews available yet.</div>';
      return;
    }

    const storeRatingValue = document.querySelector('.rating-store-value');
    if (storeRatingValue) {
      storeRatingValue.textContent = data.averageRating.toFixed(1);
    }

    const averageRatingDisplay = document.createElement('div');
    document.querySelector('.review-modal-store-description').textContent = `average ${data.averageRating.toFixed(
      1
    )} Based on ${data.totalReviews} Rating verified reviews`;

    const storeRatingLabel = document.querySelector('.review-rating-store-label');
    if (storeRatingLabel) {
      const fullStars = Math.floor(data.averageRating);

      let starHTML = '★'.repeat(fullStars);

      starHTML += '☆'.repeat(5 - starHTML.length);

      storeRatingLabel.textContent = starHTML;
    }

    data.reviews.forEach((review) => {
      const reviewDate = review.createdAt
        ? new Date(review.createdAt).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
          })
        : 'No date';

      const starsHTML = generateStars(review.rating);

      const reviewCard = document.createElement('div');
      reviewCard.className = 'card-store-review';

      reviewCard.innerHTML = `
        <div class="review-container">
          <div class="main-div-review">
            <div>
              <div class="reviewer-details">
                <div class="reviewer-name">${review.name || 'Anonymous'}</div>
                <div class="reviewer-email">${review.email || ''}</div>
              </div>
            </div>
            <div class="review-rating">
              <div class="stars">${starsHTML}</div>
            </div>
            <h3 class="review-title">${review.reviewTitle || 'Review'}</h3>
            <p class="review-message">
              ${review.reviewMessage || 'No review content'}
            </p>
          </div>
          ${generateImagesHTML(review.reviewImages)}
          <div class="review-footer">
            <div class="review-date">${reviewDate}</div>
          </div>
        </div>
      `;

      mainCardReviewContent.appendChild(reviewCard);
    });
  }

  function generateStars(rating) {
    if (!rating) return '★★★★★';

    const numStars = parseInt(rating);
    if (isNaN(numStars) || numStars < 1 || numStars > 5) return '★★★★★';

    return '★'.repeat(numStars);
  }

  function generateImagesHTML(images) {
    if (!images || !Array.isArray(images) || images.length === 0) {
      return '';
    }

    let imagesHTML = '<div class="review-images">';

    images.forEach((image) => {
      if (image && typeof image === 'string') {
        imagesHTML += `<img src="${API_BASE_URL}/uploads/${image}" alt="Review image" class="review-image">`;
      }
    });

    imagesHTML += '</div>';
    return imagesHTML;
  }

  function updateFileDisplay() {
    if (!thumbnailsContainer || !fileName) return;

    thumbnailsContainer.innerHTML = '';

    if (selectedFiles.length > 0) {
      if (selectedFiles.length === 1) {
        fileName.textContent = selectedFiles[0].name;
      } else {
        fileName.textContent = `${selectedFiles.length} files selected`;
      }

      selectedFiles.forEach((file, index) => {
        if (file.type.startsWith('image/')) {
          const reader = new FileReader();

          reader.onload = function (e) {
            const thumbnail = document.createElement('div');
            thumbnail.className = 'review-thumbnail';

            const img = document.createElement('img');
            img.src = e.target.result;
            thumbnail.appendChild(img);

            const removeBtn = document.createElement('div');
            removeBtn.className = 'review-thumbnail-remove';
            removeBtn.innerHTML = '✕';
            removeBtn.setAttribute('data-index', index);
            removeBtn.addEventListener('click', function (e) {
              e.preventDefault();
              const idx = parseInt(this.getAttribute('data-index'));
              selectedFiles.splice(idx, 1);
              updateFileDisplay();
            });

            thumbnail.appendChild(removeBtn);
            thumbnailsContainer.appendChild(thumbnail);
          };

          reader.readAsDataURL(file);
        }
      });
    } else {
      fileName.textContent = '';
    }
  }

  function submitReview() {
    if (!customerName || !customerEmail || !reviewMessage) {
      showSubmissionMessage('Form elements not found. Please refresh the page and try again.', false);
      return;
    }

    const customerNameValue = customerName.value.trim();
    const customerEmailValue = customerEmail.value.trim();
    const reviewTitle = document.getElementById('reviewTitle')?.value.trim() || '';
    const reviewMessageValue = reviewMessage.value.trim();
    const storeNameValue = storeName.value.trim();
    const rating = userRating;

    let isValid = true;

    if (!customerNameValue) {
      if (nameError) nameError.textContent = 'Please enter your name';
      customerName.classList.add('invalid-input');
      isValid = false;
    } else {
      if (nameError) nameError.textContent = '';
      customerName.classList.remove('invalid-input');
    }

    if (!customerEmailValue) {
      if (emailError) emailError.textContent = 'Please enter your email';
      customerEmail.classList.add('invalid-input');
      isValid = false;
    } else if (!isValidEmail(customerEmailValue)) {
      if (emailError) emailError.textContent = 'Please enter a valid email address';
      customerEmail.classList.add('invalid-input');
      isValid = false;
    } else {
      if (emailError) emailError.textContent = '';
      customerEmail.classList.remove('invalid-input');
    }

    if (!rating) {
      showSubmissionMessage('Please select a rating before submitting.', false);
      isValid = false;
    }

    if (!isValid) {
      return;
    }

    if (submitBtn) {
      submitBtn.disabled = true;
      submitBtn.textContent = 'Submitting...';
    }

    const formData = new FormData();
    formData.append('name', customerNameValue);
    formData.append('email', customerEmailValue);
    formData.append('reviewTitle', reviewTitle);
    formData.append('rating', rating);
    formData.append('reviewMessage', reviewMessageValue);
    formData.append('storeName', storeNameValue);

    if (selectedFiles.length > 0) {
      selectedFiles.forEach((file, index) => {
        formData.append('reviewImages', file);
      });
    }

    const fetchPromise = fetch(ADD_STORE_REVIEW_API, {
      method: 'POST',
      body: formData,
    });

    const timeoutPromise = new Promise((_, reject) => setTimeout(() => reject(new Error('Request timed out')), 30000));

    Promise.race([fetchPromise, timeoutPromise])
      .then((response) => {
        if (!response.ok) {
          console.error('Server response:', response.status, response.statusText);
          throw new Error(`Server responded with status: ${response.status}`);
        }
        return response.json();
      })
      .then((data) => {
        const formControls = document.querySelectorAll('.review-form-store-group');
        formControls.forEach((element) => {
          element.style.display = 'none';
        });

        if (successCheckmark) {
          successCheckmark.style.display = 'block';
        }

        showSubmissionMessage('Thank you for your review! Your feedback helps us improve our service.', true);

        setTimeout(() => {
          currentPage = 1;
          const GET_STORE_REVIEW_API = `${API_BASE_URL}/api/storeReview/{{ shop_name }}?active=true&page=1`;
          fetchReviewsForPage(GET_STORE_REVIEW_API);
        }, 1000);

        setTimeout(() => {
          closeReviewModal();
        }, 3000);
      })
      .catch((error) => {
        console.error('Error submitting review:', error);
        showSubmissionMessage(
          `We encountered an error submitting your review: ${error.message}. Please try again later.`,
          false
        );

        if (submitBtn) {
          submitBtn.disabled = false;
          submitBtn.textContent = 'Submit Review';
        }
      });
  }
</script>
