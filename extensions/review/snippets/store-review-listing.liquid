{% assign shop_name = shop.metafields.shopName.shopName %}
{{ 'storeReviewListing.css' | asset_url | stylesheet_tag }}

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const storeRating = document.getElementById('storeRating');
    const reviewModal = document.getElementById('reviewModal');
    const closeModal = document.getElementById('closeModal');
    const addReviewBtn = document.getElementById('addReviewBtn');
    const reviewForm = document.getElementById('reviewForm');
    const cancelBtn = document.getElementById('cancelBtn');
    const reviewImage = document.getElementById('reviewImage');
    const fileName = document.getElementById('fileName');
    const emojis = document.querySelectorAll('.review-emoji-rating');
    const submissionMessage = document.getElementById('submissionMessage');
    const submitBtn = document.getElementById('submitBtn');
    const formProgress = document.getElementById('formProgress');
    const charCount = document.getElementById('charCount');
    const reviewMessage = document.getElementById('reviewMessage');
    const nameError = document.getElementById('nameError');
    const emailError = document.getElementById('emailError');
    const customerName = document.getElementById('customerName');
    const storeName = document.getElementById('storeName');
    const customerEmail = document.getElementById('customerEmail');
    const successCheckmark = document.getElementById('successCheckmark');
    const thumbnailsContainer = document.getElementById('reviewThumbnails');
    const mainCardReviewContent = document.querySelector('.main-card-review-content');
    const API_BASE_URL = 'https://checklist.codecrewinfotech.com';
    const ADD_STORE_REVIEW_API = `${API_BASE_URL}/api/storeReview`;
    const GET_STORE_REVIEW_API = `https://def94b3b3985.ngrok-free.app/api/storeReviewSetting/{{ shop_name }}`;

    fetchStoreReviewRating();

    async function fetchStoreReviewRating() {
      try {
        const response = await fetch(GET_STORE_REVIEW_API, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': 'abcdefg',
            'ngrok-skip-browser-warning': 'true',
          },
        });
        const storeReviewData = await response.json();
        const storeReviewDataConfig = storeReviewData?.data;
      } catch (error) {
        console.error('Error fetching rating config:', error);
      }
    }

    let userRating = 0;
    let formFields = [
      { element: customerName, filled: false },
      { element: storeName, filled: true },
      { element: customerEmail, filled: false },
      { element: document.getElementById('reviewTitle'), filled: false },
      { element: reviewMessage, filled: false },
    ];

    let selectedFiles = [];
    let currentPage = 1;
    let totalPages = 1;
    let isLoading = false;

    function initializeApp() {
      const cardReviewContent = document.querySelector('.card-store-review');
      const firstPageBtn = document.querySelector('.first-page');
      const prevPageBtn = document.querySelector('.prev-page');
      const nextPageBtn = document.querySelector('.next-page');
      const lastPageBtn = document.querySelector('.last-page');
      const currentPageSpan = document.querySelector('.current-page');
      const totalPagesSpan = document.querySelector('.total-pages');

      function updatePagination(data) {
        if (!data) return;

        if (data.totalPages) {
          totalPages = data.totalPages;
        }

        if (firstPageBtn) {
          firstPageBtn.disabled = currentPage === 1;
        }
        if (prevPageBtn) {
          prevPageBtn.disabled = currentPage === 1;
        }
        if (nextPageBtn) {
          nextPageBtn.disabled = currentPage === totalPages;
        }
        if (lastPageBtn) {
          lastPageBtn.disabled = currentPage === totalPages;
        }

        if (currentPageSpan) {
          currentPageSpan.textContent = currentPage;
        }
        if (totalPagesSpan) {
          totalPagesSpan.textContent = `of ${totalPages}`;
        }
      }

      function fetchReviewsForPage(apiUrl) {
        if (isLoading) return;

        if (!mainCardReviewContent) return;

        mainCardReviewContent.innerHTML = '<div class="loading-reviews">Loading reviews...</div>';
        isLoading = true;

        fetch(apiUrl, {
          method: 'GET',
          headers: {
            'ngrok-skip-browser-warning': 'true',
            'Content-Type': 'application/json',
          },
        })
          .then((response) => {
            if (!response.ok) {
              console.error('Server response:', response.status, response.statusText);
              throw new Error(`Server responded with status: ${response.status}`);
            }
            return response.json();
          })
          .then((data) => {
            displayReview(data);
            updatePagination(data);
            isLoading = false;
          })
          .catch((error) => {
            console.error('Error fetching reviews:', error);
            if (mainCardReviewContent) {
              mainCardReviewContent.innerHTML = `<div class="error-message">Failed to load reviews: ${error.message}. Please try again later.</div>`;
            }
            isLoading = false;
          });
      }

      if (firstPageBtn) {
        firstPageBtn.addEventListener('click', () => {
          if (isLoading) return;
          currentPage = 1;
          const GET_STORE_REVIEW_API = `${API_BASE_URL}/api/storeReview/{{ shop_name }}?active=true&page=${currentPage}`;
          fetchReviewsForPage(GET_STORE_REVIEW_API);
        });
      }

      if (prevPageBtn) {
        prevPageBtn.addEventListener('click', () => {
          if (isLoading || currentPage <= 1) return;
          currentPage--;
          const GET_STORE_REVIEW_API = `${API_BASE_URL}/api/storeReview/{{ shop_name }}?active=true&page=${currentPage}`;
          fetchReviewsForPage(GET_STORE_REVIEW_API);
        });
      }

      if (nextPageBtn) {
        nextPageBtn.addEventListener('click', () => {
          if (isLoading || currentPage >= totalPages) return;
          currentPage++;
          const GET_STORE_REVIEW_API = `${API_BASE_URL}/api/storeReview/{{ shop_name }}?active=true&page=${currentPage}`;
          fetchReviewsForPage(GET_STORE_REVIEW_API);
        });
      }

      if (lastPageBtn) {
        lastPageBtn.addEventListener('click', () => {
          if (isLoading) return;
          currentPage = totalPages;
          const GET_STORE_REVIEW_API = `${API_BASE_URL}/api/storeReview/{{ shop_name }}?active=true&page=${currentPage}`;
          fetchReviewsForPage(GET_STORE_REVIEW_API);
        });
      }

      const GET_STORE_REVIEW_API = `${API_BASE_URL}/api/storeReview/{{ shop_name }}?active=true&page=1`;
      fetchReviewsForPage(GET_STORE_REVIEW_API);
    }

    function setupEventListeners() {
      if (formFields.every((field) => field.element)) {
        formFields.forEach((field) => {
          if (field.element) {
            field.element.addEventListener('input', () => {
              field.filled = field.element.value.trim() !== '';
              updateFormProgress();
            });
          }
        });
      }

      if (reviewMessage && charCount) {
        reviewMessage.addEventListener('input', () => {
          const count = reviewMessage.value.length;
          charCount.textContent = `${count}/1000`;

          if (count > 1000) {
            charCount.style.color = '#ff3860';
          } else {
            charCount.style.color = '#999';
          }
        });
      }

      if (storeRating && reviewModal) {
        storeRating.addEventListener('click', () => {
          reviewModal.style.display = 'flex';
          document.body.style.overflow = 'hidden';
        });
      }

      if (closeModal) {
        closeModal.addEventListener('click', () => {
          closeReviewModal();
        });
      }

      if (reviewModal) {
        window.addEventListener('click', (e) => {
          if (e.target === reviewModal) {
            closeReviewModal();
          }
        });

        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape' && reviewModal.style.display === 'flex') {
            closeReviewModal();
          }
        });
      }

      if (addReviewBtn && reviewForm) {
        addReviewBtn.addEventListener('click', () => {
          reviewForm.classList.toggle('review-open');
          if (reviewForm.classList.contains('review-open')) {
            addReviewBtn.textContent = 'Cancel Review';
            addReviewBtn.style.backgroundColor = '#f44336';
          } else {
            addReviewBtn.textContent = 'Share Your Experience';
            addReviewBtn.style.backgroundColor = '#000000';
          }
        });
      }

      if (cancelBtn && reviewForm && addReviewBtn) {
        cancelBtn.addEventListener('click', () => {
          reviewForm.classList.remove('review-open');
          addReviewBtn.textContent = 'Share Your Experience';
          addReviewBtn.style.backgroundColor = '#000000';
          resetForm();
        });
      }

      if (emojis && emojis.length > 0) {
        emojis.forEach((emoji) => {
          emoji.addEventListener('mouseover', () => {
            const value = emoji.getAttribute('data-value');
            highlightEmojis(value);
          });

          emoji.addEventListener('mouseout', () => {
            resetEmojis();
            if (userRating > 0) {
              highlightEmojis(userRating);
            }
          });

          emoji.addEventListener('click', () => {
            const value = emoji.getAttribute('data-value');
            userRating = parseInt(value);
            selectEmoji(value);
            updateFormProgress();
          });

          emoji.setAttribute('tabindex', '0');
          emoji.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
              e.preventDefault();
              const value = emoji.getAttribute('data-value');
              userRating = parseInt(value);
              selectEmoji(value);
              updateFormProgress();
            }
          });
        });
      }

      if (reviewImage) {
        reviewImage.addEventListener('change', function (e) {
          const fileInput = e.target;

          if (fileInput.files.length > 0) {
            Array.from(fileInput.files).forEach((file) => {
              if (file.type.startsWith('image/')) {
                selectedFiles.push(file);
              }
            });

            updateFileDisplay();
          }

          fileInput.value = '';
        });
      }

      if (submitBtn) {
        submitBtn.addEventListener('click', submitReview);
      }
    }

    function isValidEmail(email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }

    function updateFormProgress() {
      if (!formProgress) return;

      const totalFields = formFields.length + (userRating > 0 ? 1 : 0);
      const filledFields = formFields.filter((field) => field.filled).length + (userRating > 0 ? 1 : 0);
      const progress = Math.min((filledFields / totalFields) * 100, 100);
      formProgress.style.width = `${progress}%`;
    }

    function resetEmojis() {
      if (!emojis) return;

      emojis.forEach((e) => {
        e.classList.remove('review-active');
      });
    }

    function highlightEmojis(value) {
      if (!emojis) return;

      emojis.forEach((e) => {
        if (parseInt(e.getAttribute('data-value')) <= parseInt(value)) {
          e.classList.add('review-active');
        } else {
          e.classList.remove('review-active');
        }
      });
    }

    function selectEmoji(value) {
      resetEmojis();

      if (!emojis) return;

      emojis.forEach((e) => {
        if (parseInt(e.getAttribute('data-value')) <= parseInt(value)) {
          e.classList.add('review-active');
        }
      });
    }

    function resetForm() {
      userRating = 0;
      resetEmojis();

      formFields.forEach((field) => {
        if (field.element) {
          field.element.value = '';
          field.filled = false;
          field.element.classList.remove('invalid-input');
        }
      });

      if (reviewImage) {
        reviewImage.value = '';
      }

      selectedFiles = [];

      if (fileName) {
        fileName.textContent = '';
      }

      if (thumbnailsContainer) {
        thumbnailsContainer.innerHTML = '';
      }

      if (submissionMessage) {
        submissionMessage.style.display = 'none';
      }

      if (nameError) {
        nameError.textContent = '';
        nameError.style.display = 'none';
      }

      if (emailError) {
        emailError.textContent = '';
        emailError.style.display = 'none';
      }

      if (charCount) {
        charCount.textContent = '0/1000';
      }

      updateFormProgress();

      const formControls = document.querySelectorAll('.review-form-store-group');
      if (formControls) {
        formControls.forEach((element) => {
          element.style.display = 'block';
        });
      }

      if (successCheckmark) {
        successCheckmark.style.display = 'none';
      }
    }

    function closeReviewModal() {
      if (!reviewModal) return;

      reviewModal.style.display = 'none';
      document.body.style.overflow = '';
      resetForm();

      if (reviewForm) {
        reviewForm.classList.remove('review-open');
      }

      if (addReviewBtn) {
        addReviewBtn.textContent = 'Share Your Experience';
        addReviewBtn.style.backgroundColor = '#000000';
      }
    }

    function showSubmissionMessage(message, isSuccess) {
      if (!submissionMessage) return;

      submissionMessage.textContent = message;
      submissionMessage.style.display = 'block';

      if (isSuccess) {
        submissionMessage.className = 'review-submission-message review-submission-success';
      } else {
        submissionMessage.className = 'review-submission-message review-submission-error';
      }
    }

    function displayReview(data) {
      if (!mainCardReviewContent) return;

      mainCardReviewContent.innerHTML = '';

      if (!data.reviews || !Array.isArray(data.reviews) || data.reviews.length === 0) {
        mainCardReviewContent.innerHTML = '<div class="no-reviews-message">No reviews available yet.</div>';
        return;
      }

      const storeRatingValue = document.querySelector('.rating-store-value');
      if (storeRatingValue) {
        storeRatingValue.textContent = data.averageRating.toFixed(1);
      }

      const reviewModalDescription = document.querySelector('.review-modal-store-description');
      if (reviewModalDescription) {
        reviewModalDescription.textContent = `Average ${data.averageRating.toFixed(1)} Based on ${
          data.totalReviews
        } Rating Verified Reviews`;
      }

      const storeRatingLabel = document.querySelector('.review-rating-store-label');
      if (storeRatingLabel) {
        const fullStars = Math.floor(data.averageRating);
        let starHTML = '★'.repeat(fullStars);
        starHTML += '☆'.repeat(5 - fullStars);
        storeRatingLabel.textContent = starHTML;
      }

      data.reviews.forEach((review) => {
        const reviewDate = review.createdAt
          ? new Date(review.createdAt).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
            })
          : 'No date';

        const starsHTML = generateStars(review.rating);

        const reviewCard = document.createElement('div');
        reviewCard.className = 'card-store-review';

        reviewCard.innerHTML = `
        <div class="review-container">
          <div class="main-div-review">
            <div>
              <div class="reviewer-details">
                <div class="reviewer-name">${review.name || 'Anonymous'}</div>
                <div class="reviewer-email">${review.email || ''}</div>
              </div>
            </div>
            <div class="review-rating">
              <div class="stars">${starsHTML}</div>
            </div>
            <h3 class="review-title">${review.reviewTitle || 'Review'}</h3>
            <p class="review-message">
              ${review.reviewMessage || 'No review content'}
            </p>
          </div>
          ${generateImagesHTML(review.reviewImages)}
          <div class="review-footer">
            <div class="review-date">${reviewDate}</div>
          </div>
        </div>
      `;

        mainCardReviewContent.appendChild(reviewCard);
      });
    }

    function generateStars(rating) {
      if (!rating) return '★★★★★';

      const numStars = parseInt(rating);
      if (isNaN(numStars) || numStars < 1 || numStars > 5) return '★★★★★';

      return '★'.repeat(numStars);
    }

    function generateImagesHTML(images) {
      if (!images || !Array.isArray(images) || images.length === 0) {
        return '';
      }

      let imagesHTML = '<div class="review-images">';

      images.forEach((image) => {
        if (image && typeof image === 'string') {
          imagesHTML += `<img src="${API_BASE_URL}/uploads/${image}" alt="Review image" class="review-image">`;
        }
      });

      imagesHTML += '</div>';
      return imagesHTML;
    }

    function updateFileDisplay() {
      if (!thumbnailsContainer || !fileName) return;

      thumbnailsContainer.innerHTML = '';

      if (selectedFiles.length > 0) {
        if (selectedFiles.length === 1) {
          fileName.textContent = selectedFiles[0].name;
        } else {
          fileName.textContent = `${selectedFiles.length} files selected`;
        }

        selectedFiles.forEach((file, index) => {
          if (file.type.startsWith('image/')) {
            const reader = new FileReader();

            reader.onload = function (e) {
              const thumbnail = document.createElement('div');
              thumbnail.className = 'review-thumbnail';

              const img = document.createElement('img');
              img.src = e.target.result;
              thumbnail.appendChild(img);

              const removeBtn = document.createElement('div');
              removeBtn.className = 'review-thumbnail-remove';
              removeBtn.innerHTML = '✕';
              removeBtn.setAttribute('data-index', index);
              removeBtn.addEventListener('click', function (e) {
                e.preventDefault();
                const idx = parseInt(this.getAttribute('data-index'));
                selectedFiles.splice(idx, 1);
                updateFileDisplay();
              });

              thumbnail.appendChild(removeBtn);
              thumbnailsContainer.appendChild(thumbnail);
            };

            reader.readAsDataURL(file);
          }
        });
      } else {
        fileName.textContent = '';
      }
    }

    function submitReview() {
      if (!customerName || !customerEmail || !reviewMessage) {
        showSubmissionMessage('Form elements not found. Please refresh the page and try again.', false);
        return;
      }

      const customerNameValue = customerName.value.trim();
      const customerEmailValue = customerEmail.value.trim();
      const reviewTitle = document.getElementById('reviewTitle')?.value.trim() || '';
      const reviewMessageValue = reviewMessage.value.trim();
      const storeNameValue = storeName.value.trim();
      const rating = userRating;

      let isValid = true;

      if (!customerNameValue) {
        if (nameError) {
          nameError.textContent = 'Please enter your name';
          nameError.style.display = 'block';
        }
        customerName.classList.add('invalid-input');
        isValid = false;
      } else {
        if (nameError) {
          nameError.textContent = '';
          nameError.style.display = 'none';
        }
        customerName.classList.remove('invalid-input');
      }

      if (!customerEmailValue) {
        if (emailError) {
          emailError.textContent = 'Please enter your email';
          emailError.style.display = 'block';
        }
        customerEmail.classList.add('invalid-input');
        isValid = false;
      } else if (!isValidEmail(customerEmailValue)) {
        if (emailError) {
          emailError.textContent = 'Please enter a valid email address';
          emailError.style.display = 'block';
        }
        customerEmail.classList.add('invalid-input');
        isValid = false;
      } else {
        if (emailError) {
          emailError.textContent = '';
          emailError.style.display = 'none';
        }
        customerEmail.classList.remove('invalid-input');
      }

      if (!rating) {
        showSubmissionMessage('Please select a rating before submitting.', false);
        isValid = false;
      }

      if (!isValid) {
        return;
      }

      if (submitBtn) {
        submitBtn.disabled = true;
        submitBtn.textContent = 'Submitting...';
      }

      const formData = new FormData();
      formData.append('name', customerNameValue);
      formData.append('email', customerEmailValue);
      formData.append('reviewTitle', reviewTitle);
      formData.append('rating', rating);
      formData.append('reviewMessage', reviewMessageValue);
      formData.append('storeName', storeNameValue);

      if (selectedFiles.length > 0) {
        selectedFiles.forEach((file, index) => {
          formData.append('reviewImages', file);
        });
      }

      const fetchPromise = fetch(ADD_STORE_REVIEW_API, {
        method: 'POST',
        body: formData,
      });

      const timeoutPromise = new Promise((_, reject) =>
        setTimeout(() => reject(new Error('Request timed out')), 30000)
      );

      Promise.race([fetchPromise, timeoutPromise])
        .then((response) => {
          if (!response.ok) {
            console.error('Server response:', response.status, response.statusText);
            throw new Error(`Server responded with status: ${response.status}`);
          }
          return response.json();
        })
        .then((data) => {
          const formControls = document.querySelectorAll('.review-form-store-group');
          formControls.forEach((element) => {
            element.style.display = 'none';
          });

          if (successCheckmark) {
            successCheckmark.style.display = 'block';
          }

          showSubmissionMessage('Thank you for your review! Your feedback helps us improve our service.', true);

          setTimeout(() => {
            currentPage = 1;
            const GET_STORE_REVIEW_API = `${API_BASE_URL}/api/storeReview/{{ shop_name }}?active=true&page=1`;
            initializeApp();
          }, 1000);

          setTimeout(() => {
            closeReviewModal();
          }, 3000);
        })
        .catch((error) => {
          console.error('Error submitting review:', error);
          showSubmissionMessage(
            `We encountered an error submitting your review: ${error.message}. Please try again later.`,
            false
          );

          if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.textContent = 'Submit Review';
          }
        });
    }
    initializeApp();
    setupEventListeners();
  });
</script>

<div class="container">
  <div class="store-rating" id="storeRating">
    <div class="average-store-rating">
      <div class="stars-store-container">
        <span class="store-stars">★</span>
        <span class="store-stars">★</span>
        <span class="store-stars">★</span>
        <span class="store-stars">★</span>
        <span class="store-stars">★</span>
      </div>
      <span class="rating-store-value"></span>
    </div>
  </div>
</div>

<div class="review-store-modal" id="reviewModal">
  <div class="review-store-modal-content">
    <span class="review-close-store-modal" id="closeModal" aria-label="Close modal">&times;</span>
    <h2 class="review-modal-store-title">Customer Reviews</h2>
    <p class="review-modal-store-description"></p>
    <div class="review-rating-store-label"></div>

    <button class="review-add-store-review-btn" id="addReviewBtn">Share Your Experience</button>

    <div class="review-store-form" id="reviewForm">
      <div class="form-progress">
        <div class="progress-bar" id="formProgress"></div>
      </div>

      <div class="review-user-rating">
        <div class="emoji-rating-container">
          <span class="review-emoji-rating" data-value="1">😞</span>
          <span class="emoji-tooltip">Very Disappointed</span>
        </div>
        <div class="emoji-rating-container">
          <span class="review-emoji-rating" data-value="2">😐</span>
          <span class="emoji-tooltip">Not Great</span>
        </div>
        <div class="emoji-rating-container">
          <span class="review-emoji-rating" data-value="3">😊</span>
          <span class="emoji-tooltip">Acceptable</span>
        </div>
        <div class="emoji-rating-container">
          <span class="review-emoji-rating" data-value="4">😄</span>
          <span class="emoji-tooltip">Good Experience</span>
        </div>
        <div class="emoji-rating-container">
          <span class="review-emoji-rating" data-value="5">🤩</span>
          <span class="emoji-tooltip">Excellent!</span>
        </div>
      </div>

      <div class="review-form-store-group">
        <label for="customerName">Full Name</label>
        <div class="input-container">
          <input type="text" id="customerName" placeholder="Enter your name" aria-required="true">
          <div class="input-highlight"></div>
        </div>
        <div class="error-message" id="nameError"></div>
      </div>
      <input type="hidden" id="storeName" name="storeName" value="{{ shop_name }}">
      <div class="review-form-store-group">
        <label for="customerEmail">Email Address</label>
        <div class="input-container">
          <input type="email" id="customerEmail" placeholder="Enter your email" aria-required="true">
          <div class="input-highlight"></div>
        </div>
        <div class="error-message" id="emailError"></div>
      </div>

      <div class="review-form-store-group">
        <label for="reviewTitle">Review Title</label>
        <div class="input-container">
          <input type="text" id="reviewTitle" placeholder="Summarize your experience in a few words">
          <div class="input-highlight"></div>
        </div>
      </div>

      <div class="review-form-store-group">
        <label for="reviewMessage">Your Review</label>
        <div class="input-container">
          <textarea id="reviewMessage" placeholder="Share details about your experience with our store"></textarea>
          <div class="input-highlight"></div>
        </div>
        <div class="char-count" id="charCount">0/1000</div>
      </div>

      <div class="review-upload-container">
        <label for="reviewImage" class="review-file-label">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="20"
            height="20"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="review-file-icon"
          >
            <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
            <circle cx="8.5" cy="8.5" r="1.5"></circle>
            <polyline points="21 15 16 10 5 21"></polyline>
          </svg>
          Add Photos
        </label>
      </div>
      <div class="review-image-store">
        <input type="file" id="reviewImage" class="review-file-input" accept="image/*" multiple>
        <span class="review-file-name" id="fileName"></span>
      </div>
      <div class="review-thumbnails" id="reviewThumbnails">
        <!-- Thumbnails will be added here dynamically -->
      </div>

      <div class="success-checkmark" id="successCheckmark">
        <svg viewBox="0 0 52 52">
          <circle cx="26" cy="26" r="25" fill="none" stroke="#4caf50" stroke-width="2"/>
          <path d="M14.1 27.2l7.1 7.2 16.7-16.8" fill="none" stroke="#4caf50" stroke-width="2"/>
        </svg>
      </div>

      <div class="review-submission-message" id="submissionMessage"></div>

      <div class="review-buttons-store-container">
        <button class="review-cancel-btn" id="cancelBtn">Cancel</button>
        <button class="review-submit-btn" id="submitBtn">Submit Review</button>
      </div>
    </div>

    <div class="main-card-review-content">
      <div class="card-store-review">
        <!-- Here All Data Comes -->
      </div>
    </div>
    <div class="review-pagination-container">
      <div class="review-pagination">
        <button class="page-btn prev-page" aria-label="Previous Page">&lsaquo;</button>

        <div class="page-numbers">
          <span class="current-page">1</span>
          <span class="total-pages">of 1</span>
        </div>

        <button class="page-btn next-page" aria-label="Next Page">&rsaquo;</button>
      </div>
    </div>
  </div>
</div>
