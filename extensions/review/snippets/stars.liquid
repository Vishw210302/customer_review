{% assign product_id = product.id %}
{% assign shop_name = shop.metafields.shopName.shopName %}
{{ 'starLiquid.css' | asset_url | stylesheet_tag }}

<div class="review-popup-opener"></div>

<div id="review-modal" class="review-modal page-width" aria-hidden="true" role="dialog">
  <div class="modal-content" role="document">
    <div class="modal-header">
      <h2>Share Your Experience</h2>
      <button class="close-modal" aria-label="Close review form">&times;</button>
    </div>
    <form id="review-form" class="review-form">
      <input type="hidden" id="product-id" name="productId" value="{{ product_id }}">
      <input type="hidden" id="shop-name" name="storeName" value="{{ shop_name }}">

      <div class="form-group">
        <label for="review-name">Name</label>
        <input type="text" id="review-name" name="name" required placeholder="Your name">
        <div class="error-message" id="name-error"></div>
      </div>

      <div class="form-group">
        <label for="review-email">Email</label>
        <input type="email" id="review-email" name="email" required placeholder="Your email address">
        <div class="error-message" id="email-error"></div>
      </div>

      <div class="form-group">
        <label for="review-number">Mobile Number</label>
        <input type="tel" id="review-number" name="mobile" placeholder="Your Mobile Number" pattern="[0-9]{10}">
        <div class="error-message" id="number-error"></div>
      </div>

      <div class="form-group">
        <label>Your Rating</label>
        <div class="emoji-rating">
          <label class="emoji-option">
            <input type="radio" name="rating" value="1">
            <div class="emoji">😠</div>
            <div class="emoji-label">Terrible</div>
          </label>
          <label class="emoji-option">
            <input type="radio" name="rating" value="2">
            <div class="emoji">😕</div>
            <div class="emoji-label">Poor</div>
          </label>
          <label class="emoji-option">
            <input type="radio" name="rating" value="3">
            <div class="emoji">😐</div>
            <div class="emoji-label">Okay</div>
          </label>
          <label class="emoji-option">
            <input type="radio" name="rating" value="4">
            <div class="emoji">😊</div>
            <div class="emoji-label">Good</div>
          </label>
          <label class="emoji-option">
            <input type="radio" name="rating" value="5" checked>
            <div class="emoji">😍</div>
            <div class="emoji-label">Amazing</div>
          </label>
        </div>
        <div class="error-message" id="rating-error"></div>
      </div>

      <div class="form-group">
        <label for="review-message">Your Review</label>
        <textarea
          id="review-message"
          name="reviewText"
          required
          placeholder="Tell us what you liked or didn't like about this product..."
          maxlength="500"
        ></textarea>
        <div class="character-count"><span id="char-count">0</span>/500</div>
      </div>

      <div class="form-group recommend-section">
        <label>Would you recommend this product?</label>
        <div class="recommend-buttons">
          <button type="button" class="recommend-btn yes" data-value="true"><span>👍</span> Yes</button>
          <button type="button" class="recommend-btn no" data-value="false"><span>👎</span> No</button>
        </div>
        <input type="hidden" id="recommend" name="recommend" value="">
      </div>

      <div class="form-actions">
        <button type="button" class="cancel-review">Cancel</button>
        <button type="submit" class="submit-review" id="submit-review-btn">Submit</button>
      </div>
    </form>
  </div>
</div>

<div class="container summary-container">
  <h1 class="main_title" style="text-align: center; margin-bottom: 10px; margin-top: 0;">Customer Reviews</h1>
  <p class="title_description" style="text-align: center; margin-bottom: 10px; margin-top: 0;">
    See what our customers are saying about our products and services
  </p>

  <div class="reviews-summary">
    <div class="overall-rating">
      <div class="stars">★★★★★</div>
      <div class="rating-number"></div>
      <div class="review-count"></div>
    </div>

    <div class="rating-breakdown">
      <div class="rating-bar">
        <div class="rating-label-star">★★★★★</div>
        <div class="progress-container">
          <div class="progress-bar" style="width: 96%;"></div>
        </div>
        <div class="rating-count"></div>
      </div>
      <div class="rating-bar">
        <div class="rating-label-star">★★★★☆</div>
        <div class="progress-container">
          <div class="progress-bar" style="width: 1.5%;"></div>
        </div>
        <div class="rating-count"></div>
      </div>
      <div class="rating-bar">
        <div class="rating-label-star">★★★☆☆</div>
        <div class="progress-container">
          <div class="progress-bar" style="width: 0.6%;"></div>
        </div>
        <div class="rating-count"></div>
      </div>
      <div class="rating-bar">
        <div class="rating-label-star">★★☆☆☆</div>
        <div class="progress-container">
          <div class="progress-bar" style="width: 0.2%;"></div>
        </div>
        <div class="rating-count"></div>
      </div>
      <div class="rating-bar">
        <div class="rating-label-star">★☆☆☆☆</div>
        <div class="progress-container">
          <div class="progress-bar" style="width: 0.4%;"></div>
        </div>
        <div class="rating-count"></div>
      </div>
    </div>

    <div class="review-button-container">
      <button class="write-review-button">Write a Review</button>
    </div>
  </div>

  <div id="no-reviews-message" class="no-reviews-message" style="display: none;">
    <div class="stars">☆☆☆☆☆</div>
    <p>Be the first to write a review</p>
    <button class="write-review-button">Write a Review</button>
  </div>
</div>

<div id="toast" class="toast" role="alert">
  <div class="toast-content">
    <div class="toast-icon success">
      <svg viewBox="0 0 24 24" width="24" height="24">
        <circle cx="12" cy="12" r="11" fill="none" stroke="currentColor" stroke-width="2"></circle>
        <path d="M7 13l3 3 7-7" stroke="currentColor" stroke-width="2" fill="none"></path>
      </svg>
    </div>
    <div class="toast-icon error">
      <svg viewBox="0 0 24 24" width="24" height="24">
        <circle cx="12" cy="12" r="11" fill="none" stroke="currentColor" stroke-width="2"></circle>
        <line x1="8" y1="8" x2="16" y2="16" stroke="currentColor" stroke-width="2"></line>
        <line x1="16" y1="8" x2="8" y2="16" stroke="currentColor" stroke-width="2"></line>
      </svg>
    </div>
    <div class="toast-message" id="toast-message"></div>
    <button class="toast-close" aria-label="Close notification">&times;</button>
  </div>
</div>

<script>
  class ReviewSystem {
    constructor() {
      this.API_BASE = 'https://checklist.codecrewinfotech.com/api';
      this.SETTINGS_API = 'https://def94b3b3985.ngrok-free.app/api/reviewSettings';
      this.elements = this.initElements();
      this.config = {};
      this.init();
    }

    initElements() {
      return {
        modal: document.getElementById('review-modal'),
        form: document.getElementById('review-form'),
        overlay: document.querySelector('.review-popup-opener'),
        toast: document.getElementById('toast'),
        toastMessage: document.getElementById('toast-message'),
        submitBtn: document.getElementById('submit-review-btn'),
        charCount: document.getElementById('char-count'),
        recommendBtns: document.querySelectorAll('.recommend-btn'),
        recommendInput: document.getElementById('recommend'),
        inputs: {
          name: document.getElementById('review-name'),
          email: document.getElementById('review-email'),
          mobile: document.getElementById('review-number'),
          message: document.getElementById('review-message'),
          rating: document.querySelectorAll('input[name="rating"]'),
        },
        errors: {
          name: document.getElementById('name-error'),
          email: document.getElementById('email-error'),
          rating: document.getElementById('rating-error'),
        },
        summary: {
          stars: document.querySelector('.overall-rating .stars'),
          rating: document.querySelector('.rating-number'),
          count: document.querySelector('.review-count'),
          bars: document.querySelectorAll('.rating-bar'),
        },
      };
    }

    init() {
      this.positionModal();
      this.bindEvents();
      this.fetchReviews();
      this.fetchSettings();
    }

    positionModal() {
      const target = document.querySelector('.page-width.scroll-trigger.animate--slide-in');
      if (this.elements.modal && target) {
        target.parentNode.insertBefore(this.elements.modal, target);
      }
    }

    bindEvents() {
      document
        .querySelectorAll('.write-review-button')
        .forEach((btn) => btn.addEventListener('click', () => this.openModal()));

      document
        .querySelectorAll('.close-modal, .cancel-review')
        .forEach((btn) => btn.addEventListener('click', () => this.closeModal()));

      this.elements.modal?.addEventListener('click', (e) => {
        if (e.target === this.elements.modal) this.closeModal();
      });

      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isModalOpen()) this.closeModal();
      });

      this.elements.inputs.message?.addEventListener('input', (e) => this.updateCharCount(e.target));

      this.elements.recommendBtns.forEach((btn) =>
        btn.addEventListener('click', (e) => this.selectRecommend(e.target))
      );

      this.elements.form?.addEventListener('submit', (e) => this.handleSubmit(e));

      document.querySelector('.toast-close')?.addEventListener('click', () => this.hideToast());
    }

    openModal() {
      if (!this.elements.modal) return;
      this.elements.modal.style.display = 'flex';
      this.elements.overlay.style.display = 'block';
      document.body.style.overflow = 'hidden';
    }

    closeModal() {
      if (!this.elements.modal) return;
      this.elements.modal.style.display = 'none';
      this.elements.overlay.style.display = 'none';
      document.body.style.overflow = '';
      this.resetForm();
    }

    isModalOpen() {
      return this.elements.modal?.style.display === 'flex';
    }

    updateCharCount(textarea) {
      const length = textarea.value.length;
      this.elements.charCount.textContent = length;
      this.elements.charCount.style.color = length >= 500 ? '#d32f2f' : '#666';
    }

    selectRecommend(btn) {
      this.elements.recommendInput.value = btn.getAttribute('data-value');
      this.elements.recommendBtns.forEach((b) => b.classList.remove('active'));
      btn.classList.add('active');
    }

    validateForm() {
      let isValid = true;

      if (!this.elements.inputs.name.value.trim()) {
        this.showError('name', 'Please enter your name');
        isValid = false;
      } else {
        this.clearError('name');
      }

      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!this.elements.inputs.email.value.trim() || !emailRegex.test(this.elements.inputs.email.value)) {
        this.showError('email', 'Please enter a valid email address');
        isValid = false;
      } else {
        this.clearError('email');
      }

      const mobileRegex = /^[0-9]{10}$/;
      if (this.elements.inputs.mobile.value.trim() && !mobileRegex.test(this.elements.inputs.mobile.value)) {
        this.elements.inputs.mobile.classList.add('error');
        isValid = false;
      } else {
        this.elements.inputs.mobile.classList.remove('error');
      }

      const ratingSelected = Array.from(this.elements.inputs.rating).some((input) => input.checked);
      if (!ratingSelected) {
        this.elements.errors.rating.textContent = 'Please select a rating';
        isValid = false;
      } else {
        this.elements.errors.rating.textContent = '';
      }

      return isValid;
    }

    showError(field, message) {
      this.elements.errors[field].textContent = message;
      this.elements.inputs[field].classList.add('error');
    }

    clearError(field) {
      this.elements.errors[field].textContent = '';
      this.elements.inputs[field].classList.remove('error');
    }

    resetForm() {
      this.elements.form?.reset();
      Object.values(this.elements.errors).forEach((error) => (error.textContent = ''));
      Object.values(this.elements.inputs).forEach((input) => {
        if (input.classList) input.classList.remove('error');
      });
      this.elements.charCount.textContent = '0';
      this.elements.charCount.style.color = '#666';
      this.elements.recommendBtns.forEach((btn) => btn.classList.remove('active'));
      this.elements.recommendInput.value = '';
    }

    async handleSubmit(e) {
      e.preventDefault();
      if (!this.validateForm()) return;

      this.setLoading(true);

      try {
        const formData = new FormData(this.elements.form);
        const data = Object.fromEntries(formData);

        const response = await fetch(`${this.API_BASE}/addReview`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json',
            'ngrok-skip-browser-warning': 'true',
          },
          body: JSON.stringify(data),
        });

        if (!response.ok) throw new Error('Network response was not ok');

        this.showToast('Review submitted successfully!');
        setTimeout(() => {
          this.closeModal();
          this.fetchReviews();
        }, 2000);
      } catch (error) {
        console.error('Error submitting review:', error);
        this.showToast('Failed to submit review. Please try again.', true);
      } finally {
        this.setLoading(false);
      }
    }

    setLoading(isLoading) {
      this.elements.submitBtn.classList.toggle('loading', isLoading);
      this.elements.submitBtn.disabled = isLoading;
    }

    showToast(message, isError = false) {
      this.elements.toastMessage.textContent = message;
      this.elements.toast.classList.toggle('error', isError);
      this.elements.toast.classList.toggle('success', !isError);
      this.elements.toast.classList.add('active');
      setTimeout(() => this.hideToast(), 5000);
    }

    hideToast() {
      this.elements.toast.classList.remove('active');
    }

    async fetchReviews() {
      try {
        const response = await fetch(`${this.API_BASE}/getReview/{{ shop_name }}/{{ product_id }}`, {
          headers: {
            Accept: 'application/json',
            'ngrok-skip-browser-warning': 'true',
          },
        });

        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

        const data = await response.json();
        this.updateReviewSummary(data);
        this.renderReviews(data.reviews);
      } catch (error) {
        console.error('Error fetching reviews:', error);
        this.showNoReviews();
      }
    }

    async fetchSettings() {
      try {
        const response = await fetch(`${this.SETTINGS_API}/{{ shop_name }}`, {
          headers: {
            Accept: 'application/json',
            'ngrok-skip-browser-warning': 'true',
          },
        });

        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

        const { data } = await response.json();
        this.config = data || {};
        this.applySettings();
      } catch (error) {
        console.error('Error fetching settings:', error);
      }
    }

    applySettings() {
      const { config } = this;

      const mainTitle = document.querySelector('.main_title');
      if (mainTitle && config.title) {
        mainTitle.textContent = config.title;
        if (config.titleFontSize) mainTitle.style.fontSize = config.titleFontSize;
        if (config.textColor) mainTitle.style.color = config.textColor;
      }

      const titleDesc = document.querySelector('.title_description');
      if (titleDesc && config.subtitle) {
        titleDesc.textContent = config.subtitle;
        if (config.subTitleFontSize) titleDesc.style.fontSize = config.subTitleFontSize;
        if (config.textColor) titleDesc.style.color = config.textColor;
      }

      document.querySelectorAll('.write-review-button').forEach((btn) => {
        if (config.buttonText) btn.textContent = config.buttonText;
        if (config.buttonBackground) btn.style.backgroundColor = config.buttonBackground;
        if (config.writeButtonText) btn.style.color = config.writeButtonText;
        if (config.borderRadius) btn.style.borderRadius = config.borderRadius + 'px';
      });

      if (config.primaryColor) {
        this.applyColorScheme(config.primaryColor);
      }

      if (config.borderRadius) {
        this.applyBorderRadius(config.borderRadius);
      }
    }

    applyColorScheme(primaryColor) {
      const style = document.createElement('style');
      style.textContent = `
        .overall-rating .stars,
        #no-reviews-message .stars { color: ${primaryColor}; }
        .progress-bar { background-color: ${primaryColor}; }
        .form-group input:focus,
        .form-group textarea:focus {
          border-color: ${primaryColor} !important;
          box-shadow: 0 0 0 2px ${primaryColor}20 !important;
        }
        .emoji-option input:checked + .emoji {
          background-color: ${primaryColor}20;
          border-color: ${primaryColor};
        }
        .recommend-btn.active {
          background-color: ${primaryColor} !important;
          border-color: ${primaryColor} !important;
        }
        .submit-review {
          background-color: ${this.config.buttonBackground || primaryColor} !important;
          color: ${this.config.writeButtonText || '#ffffff'} !important;
        }
        .submit-review:hover {
          background-color: ${primaryColor}dd !important;
        }
      `;
      document.head.appendChild(style);
    }

    applyBorderRadius(radius) {
      const elements = [
        '.review-modal .modal-content',
        '.form-group input',
        '.form-group textarea',
        '.submit-review',
        '.cancel-review',
        '.recommend-btn',
      ];

      elements.forEach((selector) => {
        document.querySelectorAll(selector).forEach((el) => {
          el.style.borderRadius = radius + 'px';
        });
      });
    }

    updateReviewSummary(data) {
      const noReviewsMsg = document.getElementById('no-reviews-message');
      const reviewsContainer = document.getElementById('reviews-container');
      const reviewsSummary = document.querySelector('.reviews-summary');

      if (data.totalReviews === 0) {
        noReviewsMsg?.style.setProperty('display', 'block');
        reviewsContainer?.style.setProperty('display', 'none');
        reviewsSummary?.style.setProperty('display', 'none');
        return;
      }

      noReviewsMsg?.style.setProperty('display', 'none');
      reviewsContainer?.style.setProperty('display', 'block');
      reviewsSummary?.style.setProperty('display', 'flex');

      const rating = data.averageRating?.toFixed(2);
      if (this.elements.summary.stars) this.elements.summary.stars.innerHTML = this.generateStars(data.averageRating);
      if (this.elements.summary.rating) this.elements.summary.rating.textContent = `${rating} out of 5`;
      if (this.elements.summary.count)
        this.elements.summary.count.textContent = `Based on ${data.totalReviews} reviews`;

      this.updateRatingBars(data.reviews, data.totalReviews);
    }

    updateRatingBars(reviews, totalReviews) {
      const ratingCounts = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };

      reviews?.forEach((review) => {
        const rating = review.rating;
        if (rating >= 1 && rating <= 5) ratingCounts[rating]++;
      });

      this.elements.summary.bars.forEach((bar, index) => {
        const rating = 5 - index;
        const count = ratingCounts[rating];
        const percentage = totalReviews > 0 ? (count / totalReviews) * 100 : 0;

        const progressBar = bar.querySelector('.progress-bar');
        const countElement = bar.querySelector('.rating-count');

        if (progressBar) progressBar.style.width = `${percentage}%`;
        if (countElement) countElement.textContent = count;
      });
    }

    generateStars(rating) {
      const roundedRating = Math.round(rating || 0);
      return '★'.repeat(roundedRating) + '☆'.repeat(5 - roundedRating);
    }

    renderReviews(reviews) {
      const container = document.getElementById('reviews-container');
      if (!container || !Array.isArray(reviews)) return;

      container.innerHTML = reviews
        .map(
          (review) => `
        <div class="review-item">
          <div class="review-header">
            <div class="review-author">${review.name || 'Anonymous'}</div>
            <div class="review-rating">${this.generateStars(review.rating)}</div>
          </div>
          <div class="review-content">
            <p>${review.message || ''}</p>
          </div>
          <div class="review-date">
            ${review.createdAt ? new Date(review.createdAt).toLocaleDateString() : new Date().toLocaleDateString()}
          </div>
          ${review.recommend ? '<div class="review-recommend">Recommends this product</div>' : ''}
        </div>
      `
        )
        .join('');
    }

    showNoReviews() {
      const noReviewsMsg = document.getElementById('no-reviews-message');
      const reviewsContainer = document.getElementById('reviews-container');
      const reviewsSummary = document.querySelector('.reviews-summary');

      noReviewsMsg?.style.setProperty('display', 'block');
      reviewsContainer?.style.setProperty('display', 'none');
      reviewsSummary?.style.setProperty('display', 'none');
    }
  }

  document.addEventListener('DOMContentLoaded', () => new ReviewSystem());
</script>
