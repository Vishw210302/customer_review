{% assign product_id = product.id %}
{% assign shop_name = shop.metafields.shopName.shopName %}

<div class="review-popup-opener"></div> 

<div id="review-modal" class="review-modal page-width" aria-hidden="true" role="dialog">
  <div class="modal-content" role="document">
    <div class="modal-header">
      <h2>Share Your Experience</h2>
      <button class="close-modal" aria-label="Close review form">&times;</button>
    </div>
    <form id="review-form" class="review-form">
      <input type="hidden" id="product-id" name="productId" value="{{ product_id }}">
      <input type="hidden" id="shop-name" name="storeName" value="{{ shop_name }}">

      <div class="form-group">
        <label for="review-name">Name</label>
        <input type="text" id="review-name" name="name" required placeholder="Your name">
        <div class="error-message" id="name-error"></div>
      </div>

      <div class="form-group">
        <label for="review-email">Email</label>
        <input type="email" id="review-email" name="email" required placeholder="Your email address">
        <div class="error-message" id="email-error"></div>
      </div>

      <div class="form-group">
        <label for="review-number">Mobile Number</label>
        <input
          type="tel"
          id="review-number"
          name="mobile"
          placeholder="Your Mobile Number"
          pattern="[0-9]{10}"
        >
        <div class="error-message" id="number-error"></div>
      </div>

      <div class="form-group">
        <label>Your Rating</label>
        <div class="emoji-rating">
          <label class="emoji-option">
            <input type="radio" name="rating" value="1">
            <div class="emoji">üò†</div>
            <div class="emoji-label">Terrible</div>
          </label>
          <label class="emoji-option">
            <input type="radio" name="rating" value="2">
            <div class="emoji">üòï</div>
            <div class="emoji-label">Poor</div>
          </label>
          <label class="emoji-option">
            <input type="radio" name="rating" value="3">
            <div class="emoji">üòê</div>
            <div class="emoji-label">Okay</div>
          </label>
          <label class="emoji-option">
            <input type="radio" name="rating" value="4">
            <div class="emoji">üòä</div>
            <div class="emoji-label">Good</div>
          </label>
          <label class="emoji-option">
            <input type="radio" name="rating" value="5" checked>
            <div class="emoji">üòç</div>
            <div class="emoji-label">Amazing</div>
          </label>
        </div>
        <div class="error-message" id="rating-error"></div>
      </div>

      <div class="form-group">
        <label for="review-message">Your Review</label>
        <textarea
          id="review-message"
          name="reviewText"
          required
          placeholder="Tell us what you liked or didn't like about this product..."
          maxlength="500"
        ></textarea>
        <div class="character-count"><span id="char-count">0</span>/500</div>
      </div>

      <div class="form-group recommend-section">
        <label>Would you recommend this product?</label>
        <div class="recommend-buttons">
          <button type="button" class="recommend-btn yes" data-value="true"><span>üëç</span> Yes</button>
          <button type="button" class="recommend-btn no" data-value="false"><span>üëé</span> No</button>
        </div>
        <input type="hidden" id="recommend" name="recommend" value="">
      </div>

      <div class="form-actions">
        <button type="button" class="cancel-review">Cancel</button>
        <button type="submit" class="submit-review" id="submit-review-btn">Submit</button>
      </div>
    </form>
  </div>
</div>
<div class="container summary-container">
  <h1 style="text-align: center; margin-bottom: 10px; margin-top: 0;">Customer Reviews</h1>

  <div class="reviews-summary">
    <div class="overall-rating">
      <div class="stars">‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ</div>
      <div class="rating-number"></div>
      <div class="review-count"></div>
    </div>

    <div class="rating-breakdown">
      <div class="rating-bar">
        <div class="rating-label-star">‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ</div>
        <div class="progress-container">
          <div class="progress-bar" style="width: 96%;"></div>
        </div>
        <div class="rating-count"></div>
      </div>

      <div class="rating-bar">
        <div class="rating-label-star">‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ</div>
        <div class="progress-container">
          <div class="progress-bar" style="width: 1.5%;"></div>
        </div>
        <div class="rating-count"></div>
      </div>

      <div class="rating-bar">
        <div class="rating-label-star">‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ</div>
        <div class="progress-container">
          <div class="progress-bar" style="width: 0.6%;"></div>
        </div>
        <div class="rating-count"></div>
      </div>

      <div class="rating-bar">
        <div class="rating-label-star">‚òÖ‚òÖ‚òÜ‚òÜ‚òÜ</div>
        <div class="progress-container">
          <div class="progress-bar" style="width: 0.2%;"></div>
        </div>
        <div class="rating-count"></div>
      </div>

      <div class="rating-bar">
        <div class="rating-label-star">‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ</div>
        <div class="progress-container">
          <div class="progress-bar" style="width: 0.4%;"></div>
        </div>
        <div class="rating-count"></div>
      </div>
    </div>

    <div class="review-button-container">
      <button class="write-review-button">Write a Review</button>
    </div>
  </div>

  

</div>



<div id="toast" class="toast" role="alert">
  <div class="toast-content">
    <div class="toast-icon success">
      <svg viewBox="0 0 24 24" width="24" height="24">
        <circle cx="12" cy="12" r="11" fill="none" stroke="currentColor" stroke-width="2"></circle>
        <path d="M7 13l3 3 7-7" stroke="currentColor" stroke-width="2" fill="none"></path>
      </svg>
    </div>
    <div class="toast-icon error">
      <svg viewBox="0 0 24 24" width="24" height="24">
        <circle cx="12" cy="12" r="11" fill="none" stroke="currentColor" stroke-width="2"></circle>
        <line x1="8" y1="8" x2="16" y2="16" stroke="currentColor" stroke-width="2"></line>
        <line x1="16" y1="8" x2="8" y2="16" stroke="currentColor" stroke-width="2"></line>
      </svg>
    </div>
    <div class="toast-message" id="toast-message"></div>
    <button class="toast-close" aria-label="Close notification">&times;</button>
  </div>
</div>

<style>
   .review-popup-opener{
  display: none;
    position: fixed;
   
    left: 0;
    top: 0;
    width: 100%;
    background: rgba(0, 0, 0, 0.5);
   
    overflow-y: auto;
        opacity: 1;
    visibility: visible;
    z-index: 101;
    }
.review-modal.page-width {
max-width:100%;
}
.summary-container{
  max-width:1200px;
  margin:0 auto;
}
  .reviews-summary {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #fff;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    margin-bottom: 30px;
  }
.progress-bar{
display:block !important;
}
  .overall-rating {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    
    padding-right: 20px;
  }

  .stars {
    color: #f59e0b;
    font-size: 28px;
    letter-spacing: 3px;
  }

  .rating-number {
    font-size: 20px;
    font-weight: 600;
    margin-top: 5px;
  }

  .review-count {
    font-size: 16px;
    color: #666;
    margin-top: 5px;
  }

  .rating-breakdown {
    border-right: 1px solid #eee;
    border-left: 1px solid #eee;

    flex: 2;
    padding: 0 30px;
  }

  .rating-bar {
    display: flex;
    align-items: center;
    margin-bottom: 8px;
  }

  .rating-label-star {
    min-width: 100px;
    color: #ff9d2d;
    font-size: 21px;
  }

  .progress-container {
    flex: 1;
    height: 6px;
    background-color: #eee;
    border-radius: 10px;
    margin: 0 15px;
    overflow: hidden;
  }

  .progress-bar {
    height: 6px ;  
    background-color: #f59e0b;
    border-radius: 10px;
  }

  .rating-count {
    text-align: right;
    color: #666;
  }

  .review-button-container {
        display: flex;
    justify-content: center;
    padding-left: 20px;
  }

  .write-review-button {
    background-color: #000000;
    color: #ffffff;
    border: none;
    border-radius: 50px;
    padding: 10px 15px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .write-review-button:hover {
    background-color: #ffffff;
    color: #000000;
    border: 1px solid;
  }

  .divider {
    height: 1px;
    background-color: #ddd;
    margin: 30px 0;
  }

  @media (max-width: 768px) {
    .reviews-summary {
      flex-direction: column;
    }

    .overall-rating {
      border-right: none;
      
      padding: 0 0 20px 0;
      margin-bottom: 20px;
    }

    .rating-breakdown {
      width: 100%;
      padding: 20px 0;
      border:none;
    }

    .review-button-container {
      width: 100%;
      padding-top: 20px;
    }
  }
  /* Review Container */
  .review-container {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans',
      sans-serif;
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }

  /* Header Row with Three Sections */
  .review-header-row {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    margin-bottom: 30px;
    justify-content: space-between;
    align-items: flex-start;
  }

  /* Section 1: Add Review Button */
  .add-review-section {
    flex: 0 0 auto;
    min-width: 180px;
    display: flex;
    align-items: center;
  }

  .review-btn {
    background-color: #4a90e2;
    color: white;
    border: none;
    border-radius: 6px;
    padding: 10px 20px;
    font-size: 15px;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s;
    white-space: nowrap;
  }

  .review-btn:hover {
    background-color: #3a7ccd;
  }

  /* Section 2: Rating Breakdown */
  .ratings-breakdown {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    padding: 20px;
  }

  h2 {
    margin-top: 0;
    font-weight: 500;
    color: #222;
    font-size: 18px;
  }

  .rating-item {
    display: flex;
    align-items: center;
    margin-bottom: 12px;
  }

  .count {
    width: 30px;
    text-align: right;
    font-size: 15px;
    color: #555;
  }

  .total {
    margin-top: 15px;
    text-align: right;
    font-size: 14px;
    color: #666;
  }

  /* Section 3: Review Summary */
  .review-summary-section {
    flex: 0 0 auto;
    min-width: 200px;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 20px;
    border-radius: 8px;
    background-color: white;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  }

  .average-rating-display {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: 10px;
  }

  .average-rating-number {
    font-size: 48px;
    font-weight: 700;
    color: #333;
    line-height: 1;
  }

  .average-rating-stars {
    font-size: 24px;
    color: #ffc107;
    letter-spacing: 2px;
    margin-top: 5px;
  }

  .total-reviews {
    font-size: 16px;
    color: #666;
  }

  /* Reviews Container */
  .reviews-list {
    margin-top: 20px;
  }

  .reviews-loading {
    text-align: center;
    padding: 20px;
    color: #666;
  }

  .no-reviews-message {
    text-align: center;
    padding: 20px;
    color: #666;
    background-color: #f9f9f9;
    border-radius: 8px;
  }

  /* Review Item */
  .review-item {
    padding: 20px;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    margin-bottom: 16px;
    background-color: white;
  }

  .review-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
  }

  .reviewer-info {
    font-weight: 600;
  }

  .review-rating {
    color: #ffc107;
  }

  .review-date {
    color: #888;
    font-size: 14px;
  }

  .review-text {
    margin-top: 10px;
    line-height: 1.5;
  }

  .review-recommendation {
    margin-top: 12px;
    display: flex;
    align-items: center;
    gap: 6px;
    font-size: 14px;
  }

  .recommendation-yes {
    color: #2e7d32;
  }

  .recommendation-no {
    color: #c2185b;
  }

  .review-modal {
    display: none;
    position: fixed;
   
    left: 0;
    top: 0;
    bottom:0;
    width: 100%;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(3px);
    overflow-y: auto;
        opacity: 1;
    visibility: visible;
    z-index: 101;
  }

  .modal-content {
    background: #fff;
    margin: 20px auto;
    width: 100%;
    max-width: 600px;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    animation: modalFadeIn 0.3s;
    overflow: hidden;
    height: max-content;
    align-self: anchor-center;
  }

  @keyframes modalFadeIn {
    from {
      opacity: 0;
      transform: translateY(-15px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px 20px;
    border-bottom: 1px solid #f0f0f0;
    background-color: #fafafa;
  }

  .modal-header h2 {
    margin: 0;
    font-size: 18px;
    color: #333;
    font-weight: 600;
  }

  .close-modal {
    background: none;
    border: none;
    font-size: 22px;
    line-height: 1;
    cursor: pointer;
    color: #888;
    transition: color 0.2s;
  }

  .close-modal:hover {
    color: #333;
  }

  .review-form {
    padding: 16px 20px;
  }

  .form-group {
    margin-bottom: 16px;
  }

  .form-group label {
    display: block;
    margin-bottom: 6px;
    font-weight: 500;
    color: #444;
    font-size: 14px;
  }

  input[type='text'],
  input[type='email'],
  input[type='tel'],
  textarea {
    width: 100%;
    padding: 10px 12px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 14px;
    transition: border-color 0.2s;
  }

  input[type='text']:focus,
  input[type='email']:focus,
  input[type='tel']:focus,
  textarea:focus {
    border-color: #4a90e2;
    outline: none;
    box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.1);
  }

  textarea {
    min-height: 90px;
    resize: vertical;
  }

  .character-count {
    text-align: right;
    font-size: 12px;
    color: #888;
    margin-top: 4px;
  }

  /* Emoji Rating */
  .emoji-rating {
    display: flex;
    justify-content: space-between;
    margin: 10px 0;
  }

  .emoji-option {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
    cursor: pointer;
  }

  .emoji-option input {
    position: absolute;
    opacity: 0;
    cursor: pointer;
    height: 0;
    width: 0;
  }

  .emoji {
    font-size: 28px;
    transition: transform 0.2s, opacity 0.2s;
    opacity: 0.5;
  }

  .emoji-label {
    margin-top: 5px;
    font-size: 11px;
    color: #666;
    text-align: center;
  }

  .emoji-option input:checked ~ .emoji {
    transform: scale(1.2);
    opacity: 1;
  }

  /* Recommendation Buttons */
  .recommend-section {
    margin-top: 10px;
  }

  .recommend-buttons {
    display: flex;
    gap: 8px;
    margin-top: 6px;
  }

  .recommend-btn {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 6px;
    padding: 8px 12px;
    border: 1px solid #e0e0e0;
    border-radius: 6px;
    background: #f9f9f9;
    cursor: pointer;
    transition: all 0.2s;
    font-weight: 500;
    font-size: 14px;
  }

  .recommend-btn.yes.active {
    background-color: #e8f5e9;
    border-color: #81c784;
    color: #2e7d32;
  }

  .recommend-btn.no.active {
    background-color: #fce4ec;
    border-color: #f48fb1;
    color: #c2185b;
  }

  .form-actions {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 20px;
    padding-top: 16px;
    border-top: 1px solid #f0f0f0;
  }

  .cancel-review {
    background-color: #f5f5f5;
    color: #555;
    border: 1px solid #ddd;
    padding: 8px 16px;
    border-radius: 6px;
    font-weight: 500;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .cancel-review:hover {
    background-color: #e8e8e8;
  }

  .submit-review {
    background-color: #4a90e2;
    color: white;
    border: none;
    padding: 8px 20px;
    border-radius: 6px;
    font-weight: 500;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .submit-review:hover {
    background-color: #3a7ccd;
  }

  .submit-review:disabled {
    background-color: #b8d1ef;
    cursor: not-allowed;
  }

  .error-message {
    color: #e53935;
    font-size: 12px;
    margin-top: 4px;
    min-height: 16px;
  }

  input.error,
  textarea.error {
    border-color: #e53935;
  }

  .submit-review.loading {
    position: relative;
    color: transparent;
  }

  .submit-review.loading::after {
    content: '';
    position: absolute;
    width: 16px;
    height: 16px;
    top: 50%;
    left: 50%;
    margin: -8px 0 0 -8px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: white;
    animation: spin 0.6s linear infinite;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  /* Toast Notification */
  .toast {
    position: fixed;
    bottom: 20px;
    right: 20px;
    min-width: 280px;
    max-width: 330px;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
    transform: translateY(100px);
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s;
    z-index: 1100;
  }

  .toast.active {
    transform: translateY(0);
    opacity: 1;
    visibility: visible;
  }

  .toast-content {
    display: flex;
    align-items: center;
    padding: 14px;
  }

  .toast-icon {
    margin-right: 10px;
    flex-shrink: 0;
  }

  .toast-message {
    flex-grow: 1;
    font-size: 14px;
  }

  /* Success/Error Icon Styles */
  .toast-icon.success {
    color: #4caf50;
    display: none;
  }

  .toast-icon.error {
    color: #f44336;
    display: none;
  }

  .toast.success .toast-icon.success {
    display: block;
  }

  .toast.error .toast-icon.error {
    display: block;
  }

  .toast-close {
    background: none;
    border: none;
    font-size: 18px;
    color: #888;
    cursor: pointer;
    margin-left: 10px;
  }

  /* Mobile Optimization */
  @media (max-width: 992px) {
    .review-header-row {
      flex-direction: column;
    }

    .add-review-section,
    .ratings-breakdown,
    .review-summary-section {
      width: 100%;
    }

    .review-summary-section {
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
      padding: 15px;
    }

    .average-rating-display {
      flex-direction: row;
      align-items: center;
      gap: 15px;
      margin-bottom: 0;
    }
  }

  @media (max-width: 768px) {
    .review-summary-section {
      flex-direction: column;
      align-items: center;
    }

    .average-rating-display {
      margin-bottom: 10px;
    }

    .average-rating-number {
      font-size: 36px;
    }

    .average-rating-stars {
      font-size: 20px;
    }
  }

  @media (max-width: 480px) {
    .modal-content {
      width: 95%;
      margin: 5% auto;
      max-height: 90vh;
    }

    .emoji {
      font-size: 24px;
    }

    .emoji-label {
      font-size: 10px;
    }

    .form-actions {
      margin-top: 16px;
    }

    .average-rating-number {
      font-size: 32px;
    }

    .average-rating-stars {
      font-size: 18px;
    }
  }
</style>

<script>
 document.addEventListener('DOMContentLoaded', () => {
  const modal = document.querySelector('#review-modal');
  const target = document.querySelector('.page-width.scroll-trigger.animate--slide-in');

  if (modal && target) {
    target.parentNode.insertBefore(modal, target);
  }
});


  document.addEventListener('DOMContentLoaded', function () {
  
    const modal = document.getElementById('review-modal');
    const openButton = document.querySelector('.write-review-button');
    const closeButton = document.querySelector('.close-modal');
    const cancelButton = document.querySelector('.cancel-review');
    const form = document.getElementById('review-form');
    const submitButton = document.getElementById('submit-review-btn');
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toast-message');
    const toastClose = document.querySelector('.toast-close');
    const reviewTextarea = document.getElementById('review-message');
    const charCount = document.getElementById('char-count');
    const recommendBtns = document.querySelectorAll('.recommend-btn');
    const recommendInput = document.getElementById('recommend');
    {% comment %} const reviewsContainer = document.getElementById('reviews-container'); {% endcomment %}
    const nameInput = document.getElementById('review-name');
    const emailInput = document.getElementById('review-email');
    const numberInput = document.getElementById('review-number');
    const ratingInputs = document.querySelectorAll('input[name="rating"]');
    const nameError = document.getElementById('name-error');
    const emailError = document.getElementById('email-error');
    const ratingError = document.getElementById('rating-error');
    const starsElement = document.querySelector('.overall-rating .stars');
    const ratingNumberElement = document.querySelector('.rating-number');
    const reviewCountElement = document.querySelector('.review-count');
    const ratingBars = document.querySelectorAll('.rating-bar');

    const ADD_REVIEW_API = 'https://checklist.codecrewinfotech.com/api/addReview';
    const GET_REVIEWS_API = `https://checklist.codecrewinfotech.com/api/getReview/{{ shop_name }}/{{ product_id }}`;

    fetchReviews();

    const overlay = document.querySelector('.review-popup-opener');

openButton.addEventListener('click', function () {
  modal.style.display = 'flex';
  overlay.style.overflow = 'hidden';
  overlay.style.display = 'block'; // ensure overlay is visible
   document.body.style.overflow = 'hidden';
});

function closeModal() {
  modal.style.display = 'none';
  overlay.style.overflow = '';
  overlay.style.display = 'none'; // hide overlay again
  document.body.style.overflow = '';
  resetForm();
}


    closeButton.addEventListener('click', closeModal);

    cancelButton.addEventListener('click', closeModal);

    modal.addEventListener('click', function (event) {
      if (event.target === modal) closeModal();
    });
    document.addEventListener('keydown', function (event) {
      if (event.key === 'Escape' && modal.style.display === 'block') closeModal();
    });

    reviewTextarea.addEventListener('input', function () {
      const length = this.value.length;
      charCount.textContent = length;
      charCount.style.color = length >= 500 ? '#d32f2f' : '#666';
    });

    recommendBtns.forEach((btn) => {
      btn.addEventListener('click', function () {
        recommendInput.value = this.getAttribute('data-value');
        recommendBtns.forEach((b) => b.classList.remove('active'));
        this.classList.add('active');
      });
    });

    function validateEmail(email) {
      return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    }

    function validateNumber(mobile) {
      return /^[0-9]{10}$/.test(mobile);
    }

    function validateForm() {
      let isValid = true;

      if (!nameInput.value.trim()) {
        nameError.textContent = 'Please enter your name';
        nameInput.classList.add('error');
        isValid = false;
      } else {
        nameError.textContent = '';
        nameInput.classList.remove('error');
      }

      if (!emailInput.value.trim() || !validateEmail(emailInput.value)) {
        emailError.textContent = 'Please enter a valid email address';
        emailInput.classList.add('error');
        isValid = false;
      } else {
        emailError.textContent = '';
        emailInput.classList.remove('error');
      }

      if (!numberInput.value.trim() || !validateNumber(numberInput.value)) {
        numberInput.classList.add('error');
        isValid = false;
      } else {
        numberInput.classList.remove('error');
      }

      let ratingSelected = false;
      ratingInputs.forEach((input) => {
        if (input.checked) ratingSelected = true;
      });

      ratingError.textContent = ratingSelected ? '' : 'Please select a rating';
      return isValid && ratingSelected;
    }

    function resetForm() {
      form.reset();
      nameError.textContent = '';
      emailError.textContent = '';
      ratingError.textContent = '';
      nameInput.classList.remove('error');
      emailInput.classList.remove('error');
      numberInput.classList.remove('error');
      charCount.textContent = '0';
      charCount.style.color = '#666';
      recommendBtns.forEach((btn) => btn.classList.remove('active'));
      recommendInput.value = '';
    }

    function showToast(message, isError = false) {
      toastMessage.textContent = message;
      toast.classList.toggle('error', isError);
      toast.classList.toggle('success', !isError);
      toast.classList.add('active');
      setTimeout(() => hideToast(), 5000);
    }

    function hideToast() {
      toast.classList.remove('active');
    }

    toastClose.addEventListener('click', hideToast);

    form.addEventListener('submit', function (event) {
      event.preventDefault();

      if (!validateForm()) return;

      submitButton.classList.add('loading');
      submitButton.disabled = true;

      const formData = new FormData(form);
      const jsonData = {};
      formData.forEach((value, key) => (jsonData[key] = value));

      fetch(ADD_REVIEW_API, {
        method: 'POST',
        body: JSON.stringify(jsonData),
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json',
          'ngrok-skip-browser-warning': 'true',
        },
      })
        .then((response) => {
          if (!response.ok) throw new Error('Network response was not ok');
          return response.json();
        })
        .then(() => {
          showToast('Review submitted successfully!');
          setTimeout(() => {
            closeModal();
            resetForm();
            fetchReviews();
            submitButton.classList.remove('loading');
            submitButton.disabled = false;
          }, 2000);
        })
        .catch((error) => {
          console.error('Error submitting review:', error);
          showToast('Failed to submit review. Please try again.', true);
          submitButton.classList.remove('loading');
          submitButton.disabled = false;
        });
    });

    async function fetchReviews() {
      try {
        const response = await fetch(GET_REVIEWS_API, {
          method: 'GET',
          headers: {
            Accept: 'application/json',
            'ngrok-skip-browser-warning': 'true',
          },
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        updateReviewSummary(data);

        renderReviews(data.reviews);
      } catch (error) {
        console.error('Error fetching reviews:', error);
      }
    }

    function updateReviewSummary(data) {
      const formattedRating = data.averageRating?.toFixed(2);

      starsElement.innerHTML = generateStars(data.averageRating);

      ratingNumberElement.textContent = `${formattedRating} out of 5`;

      reviewCountElement.textContent = `Based on ${data.totalReviews} reviews`;

      const ratingCounts = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };

      data.reviews.forEach((review) => {
        const rating = review.rating;
        if (rating >= 1 && rating <= 5) {
          ratingCounts[rating]++;
        }
      });

      for (let i = 5; i >= 1; i--) {
        const index = 5 - i;

        const percentage = data.totalReviews > 0 ? (ratingCounts[i] / data.totalReviews) * 100 : 0;

        const progressBar = ratingBars[index].querySelector('.progress-bar');
        const countElement = ratingBars[index].querySelector('.rating-count');

        progressBar.style.width = `${percentage}%`;

        countElement.textContent = ratingCounts[i];
      }
    }

    function generateStars(rating) {
      let starsHTML = '';
      const roundedRating = Math.round(rating);

      for (let i = 1; i <= 5; i++) {
        starsHTML += i <= roundedRating ? '‚òÖ' : '‚òÜ';
      }

      return starsHTML;
    }

    function renderReviews(reviews) {
      reviewsContainer.innerHTML = '';
      reviews.forEach((review) => {
        const reviewElement = document.createElement('div');
        reviewElement.className = 'review-item';

        reviewsContainer.appendChild(reviewElement);
      });
    }
  });
</script>