{% assign product_id = product.id %}
{% assign shop_name = shop.metafields.shopName.shopName %}
{{ 'starLiquid.css' | asset_url | stylesheet_tag }}

<div class="review-popup-opener"></div>

<div id="review-modal" class="review-modal page-width" aria-hidden="true" role="dialog">
  <div class="modal-content" role="document">
    <div class="modal-header">
      <h2>Share Your Experience</h2>
      <button class="close-modal" aria-label="Close review form">&times;</button>
    </div>
    <form id="review-form" class="review-form">
      <input type="hidden" id="product-id" name="productId" value="{{ product_id }}">
      <input type="hidden" id="shop-name" name="storeName" value="{{ shop_name }}">

      <div class="form-group">
        <label for="review-name">Name</label>
        <input type="text" id="review-name" name="name" required placeholder="Your name">
        <div class="error-message" id="name-error"></div>
      </div>

      <div class="form-group">
        <label for="review-email">Email</label>
        <input type="email" id="review-email" name="email" required placeholder="Your email address">
        <div class="error-message" id="email-error"></div>
      </div>

      <div class="form-group">
        <label for="review-number">Mobile Number</label>
        <input
          type="tel"
          id="review-number"
          name="mobile"
          placeholder="Your Mobile Number"
          pattern="[0-9]{10}"
        >
        <div class="error-message" id="number-error"></div>
      </div>

      <div class="form-group">
        <label>Your Rating</label>
        <div class="emoji-rating">
          <label class="emoji-option">
            <input type="radio" name="rating" value="1">
            <div class="emoji">üò†</div>
            <div class="emoji-label">Terrible</div>
          </label>
          <label class="emoji-option">
            <input type="radio" name="rating" value="2">
            <div class="emoji">üòï</div>
            <div class="emoji-label">Poor</div>
          </label>
          <label class="emoji-option">
            <input type="radio" name="rating" value="3">
            <div class="emoji">üòê</div>
            <div class="emoji-label">Okay</div>
          </label>
          <label class="emoji-option">
            <input type="radio" name="rating" value="4">
            <div class="emoji">üòä</div>
            <div class="emoji-label">Good</div>
          </label>
          <label class="emoji-option">
            <input type="radio" name="rating" value="5" checked>
            <div class="emoji">üòç</div>
            <div class="emoji-label">Amazing</div>
          </label>
        </div>
        <div class="error-message" id="rating-error"></div>
      </div>

      <div class="form-group">
        <label for="review-message">Your Review</label>
        <textarea
          id="review-message"
          name="reviewText"
          required
          placeholder="Tell us what you liked or didn't like about this product..."
          maxlength="500"
        ></textarea>
        <div class="character-count"><span id="char-count">0</span>/500</div>
      </div>

      <div class="form-group recommend-section">
        <label>Would you recommend this product?</label>
        <div class="recommend-buttons">
          <button type="button" class="recommend-btn yes" data-value="true"><span>üëç</span> Yes</button>
          <button type="button" class="recommend-btn no" data-value="false"><span>üëé</span> No</button>
        </div>
        <input type="hidden" id="recommend" name="recommend" value="">
      </div>

      <div class="form-actions">
        <button type="button" class="cancel-review">Cancel</button>
        <button type="submit" class="submit-review" id="submit-review-btn">Submit</button>
      </div>
    </form>
  </div>
</div>
<div class="container summary-container">
  <h1 style="text-align: center; margin-bottom: 10px; margin-top: 0;">Customer Reviews</h1>

  <div class="reviews-summary">
    <div class="overall-rating">
      <div class="stars">‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ</div>
      <div class="rating-number"></div>
      <div class="review-count"></div>
    </div>

    <div class="rating-breakdown">
      <div class="rating-bar">
        <div class="rating-label-star">‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ</div>
        <div class="progress-container">
          <div class="progress-bar" style="width: 96%;"></div>
        </div>
        <div class="rating-count"></div>
      </div>

      <div class="rating-bar">
        <div class="rating-label-star">‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ</div>
        <div class="progress-container">
          <div class="progress-bar" style="width: 1.5%;"></div>
        </div>
        <div class="rating-count"></div>
      </div>

      <div class="rating-bar">
        <div class="rating-label-star">‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ</div>
        <div class="progress-container">
          <div class="progress-bar" style="width: 0.6%;"></div>
        </div>
        <div class="rating-count"></div>
      </div>

      <div class="rating-bar">
        <div class="rating-label-star">‚òÖ‚òÖ‚òÜ‚òÜ‚òÜ</div>
        <div class="progress-container">
          <div class="progress-bar" style="width: 0.2%;"></div>
        </div>
        <div class="rating-count"></div>
      </div>

      <div class="rating-bar">
        <div class="rating-label-star">‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ</div>
        <div class="progress-container">
          <div class="progress-bar" style="width: 0.4%;"></div>
        </div>
        <div class="rating-count"></div>
      </div>
    </div>

    <div class="review-button-container">
      <button class="write-review-button">Write a Review</button>
    </div>
  </div>

  <!-- Add this new section for the no reviews message -->
  <div id="no-reviews-message" class="no-reviews-message" style="display: none;">
    <div class="stars">‚òÜ‚òÜ‚òÜ‚òÜ‚òÜ</div>
    <p>Be the first to write a review</p>

    <button class="write-review-button">Write a Review</button>
  </div>

  <!-- Your existing reviews container -->
  <div id="reviews-container" class="reviews-list"></div>
</div>

<div id="toast" class="toast" role="alert">
  <div class="toast-content">
    <div class="toast-icon success">
      <svg viewBox="0 0 24 24" width="24" height="24">
        <circle cx="12" cy="12" r="11" fill="none" stroke="currentColor" stroke-width="2"></circle>
        <path d="M7 13l3 3 7-7" stroke="currentColor" stroke-width="2" fill="none"></path>
      </svg>
    </div>
    <div class="toast-icon error">
      <svg viewBox="0 0 24 24" width="24" height="24">
        <circle cx="12" cy="12" r="11" fill="none" stroke="currentColor" stroke-width="2"></circle>
        <line x1="8" y1="8" x2="16" y2="16" stroke="currentColor" stroke-width="2"></line>
        <line x1="16" y1="8" x2="8" y2="16" stroke="currentColor" stroke-width="2"></line>
      </svg>
    </div>
    <div class="toast-message" id="toast-message"></div>
    <button class="toast-close" aria-label="Close notification">&times;</button>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.querySelector('#review-modal');
    const target = document.querySelector('.page-width.scroll-trigger.animate--slide-in');

    if (modal && target) {
      target.parentNode.insertBefore(modal, target);
    }
  });

  document.addEventListener('DOMContentLoaded', function () {
    // DOM element references
    const modal = document.getElementById('review-modal');
    const openButton = document.querySelector('.write-review-button');
    const closeButton = document.querySelector('.close-modal');
    const cancelButton = document.querySelector('.cancel-review');
    const form = document.getElementById('review-form');
    const submitButton = document.getElementById('submit-review-btn');
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toast-message');
    const toastClose = document.querySelector('.toast-close');
    const reviewTextarea = document.getElementById('review-message');
    const charCount = document.getElementById('char-count');
    const recommendBtns = document.querySelectorAll('.recommend-btn');
    const recommendInput = document.getElementById('recommend');
    const nameInput = document.getElementById('review-name');
    const emailInput = document.getElementById('review-email');
    const numberInput = document.getElementById('review-number');
    const ratingInputs = document.querySelectorAll('input[name="rating"]');
    const nameError = document.getElementById('name-error');
    const emailError = document.getElementById('email-error');
    const ratingError = document.getElementById('rating-error');
    const starsElement = document.querySelector('.overall-rating .stars');
    const ratingNumberElement = document.querySelector('.rating-number');
    const reviewCountElement = document.querySelector('.review-count');
    const ratingBars = document.querySelectorAll('.rating-bar');
    const overlay = document.querySelector('.review-popup-opener');

    // API endpoints
    const ADD_REVIEW_API = 'https://checklist.codecrewinfotech.com/api/addReview';
    const GET_REVIEWS_API = `https://checklist.codecrewinfotech.com/api/getReview/{{ shop_name }}/{{ product_id }}`;

    // Initialize
    fetchReviews();

    // Event listener for no-reviews-message button
    const noReviewsButton = document.querySelector('#no-reviews-message .write-review-button');
    if (noReviewsButton) {
      noReviewsButton.addEventListener('click', function () {
        if (modal && overlay) {
          modal.style.display = 'flex';
          overlay.style.overflow = 'hidden';
          overlay.style.display = 'block';
          document.body.style.overflow = 'hidden';
        }
      });
    }

    // Event listener for main open button
    if (openButton) {
      openButton.addEventListener('click', function () {
        if (modal && overlay) {
          modal.style.display = 'flex';
          overlay.style.overflow = 'hidden';
          overlay.style.display = 'block';
          document.body.style.overflow = 'hidden';
        }
      });
    }

    function closeModal() {
      if (modal && overlay) {
        modal.style.display = 'none';
        overlay.style.overflow = '';
        overlay.style.display = 'none';
        document.body.style.overflow = '';
        resetForm();
      }
    }

    if (closeButton) {
      closeButton.addEventListener('click', closeModal);
    }

    if (cancelButton) {
      cancelButton.addEventListener('click', closeModal);
    }

    if (modal) {
      modal.addEventListener('click', function (event) {
        if (event.target === modal) closeModal();
      });
    }

    document.addEventListener('keydown', function (event) {
      if (event.key === 'Escape' && modal && modal.style.display === 'block') closeModal();
    });

    if (reviewTextarea && charCount) {
      reviewTextarea.addEventListener('input', function () {
        const length = this.value.length;
        charCount.textContent = length;
        charCount.style.color = length >= 500 ? '#d32f2f' : '#666';
      });
    }

    if (recommendBtns && recommendInput) {
      recommendBtns.forEach((btn) => {
        btn.addEventListener('click', function () {
          recommendInput.value = this.getAttribute('data-value');
          recommendBtns.forEach((b) => b.classList.remove('active'));
          this.classList.add('active');
        });
      });
    }

    function validateEmail(email) {
      return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    }

    function validateNumber(mobile) {
      return /^[0-9]{10}$/.test(mobile);
    }

    function validateForm() {
      let isValid = true;

      if (nameInput && nameError) {
        if (!nameInput.value.trim()) {
          nameError.textContent = 'Please enter your name';
          nameInput.classList.add('error');
          isValid = false;
        } else {
          nameError.textContent = '';
          nameInput.classList.remove('error');
        }
      }

      if (emailInput && emailError) {
        if (!emailInput.value.trim() || !validateEmail(emailInput.value)) {
          emailError.textContent = 'Please enter a valid email address';
          emailInput.classList.add('error');
          isValid = false;
        } else {
          emailError.textContent = '';
          emailInput.classList.remove('error');
        }
      }

      if (numberInput) {
        if (!numberInput.value.trim() || !validateNumber(numberInput.value)) {
          numberInput.classList.add('error');
          isValid = false;
        } else {
          numberInput.classList.remove('error');
        }
      }

      let ratingSelected = false;
      if (ratingInputs) {
        ratingInputs.forEach((input) => {
          if (input.checked) ratingSelected = true;
        });
      }

      if (ratingError) {
        ratingError.textContent = ratingSelected ? '' : 'Please select a rating';
      }

      return isValid && ratingSelected;
    }

    function resetForm() {
      if (form) {
        form.reset();
      }
      if (nameError) nameError.textContent = '';
      if (emailError) emailError.textContent = '';
      if (ratingError) ratingError.textContent = '';
      if (nameInput) nameInput.classList.remove('error');
      if (emailInput) emailInput.classList.remove('error');
      if (numberInput) numberInput.classList.remove('error');
      if (charCount) {
        charCount.textContent = '0';
        charCount.style.color = '#666';
      }
      if (recommendBtns) {
        recommendBtns.forEach((btn) => btn.classList.remove('active'));
      }
      if (recommendInput) recommendInput.value = '';
    }

    function showToast(message, isError = false) {
      if (toastMessage && toast) {
        toastMessage.textContent = message;
        toast.classList.toggle('error', isError);
        toast.classList.toggle('success', !isError);
        toast.classList.add('active');
        setTimeout(() => hideToast(), 5000);
      }
    }

    function hideToast() {
      if (toast) {
        toast.classList.remove('active');
      }
    }

    if (toastClose) {
      toastClose.addEventListener('click', hideToast);
    }

    if (form) {
      form.addEventListener('submit', function (event) {
        event.preventDefault();

        if (!validateForm()) return;

        if (submitButton) {
          submitButton.classList.add('loading');
          submitButton.disabled = true;
        }

        const formData = new FormData(form);
        const jsonData = {};
        formData.forEach((value, key) => (jsonData[key] = value));

        fetch(ADD_REVIEW_API, {
          method: 'POST',
          body: JSON.stringify(jsonData),
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json',
            'ngrok-skip-browser-warning': 'true',
          },
        })
          .then((response) => {
            if (!response.ok) throw new Error('Network response was not ok');
            return response.json();
          })
          .then(() => {
            showToast('Review submitted successfully!');
            setTimeout(() => {
              closeModal();
              resetForm();
              fetchReviews();
              if (submitButton) {
                submitButton.classList.remove('loading');
                submitButton.disabled = false;
              }
            }, 2000);
          })
          .catch((error) => {
            console.error('Error submitting review:', error);
            showToast('Failed to submit review. Please try again.', true);
            if (submitButton) {
              submitButton.classList.remove('loading');
              submitButton.disabled = false;
            }
          });
      });
    }

    async function fetchReviews() {
      try {
        const response = await fetch(GET_REVIEWS_API, {
          method: 'GET',
          headers: {
            Accept: 'application/json',
            'ngrok-skip-browser-warning': 'true',
          },
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        updateReviewSummary(data);
        renderReviews(data.reviews);
      } catch (error) {
        console.error('Error fetching reviews:', error);
        // Handle error gracefully
        const noReviewsMessage = document.getElementById('no-reviews-message');
        const reviewsContainer = document.getElementById('reviews-container');

        if (noReviewsMessage) noReviewsMessage.style.display = 'block';
        if (reviewsContainer) reviewsContainer.style.display = 'none';

        const reviewsSummary = document.querySelector('.reviews-summary');
        if (reviewsSummary) reviewsSummary.style.display = 'none';
      }
    }

    function updateReviewSummary(data) {
      const noReviewsMessage = document.getElementById('no-reviews-message');
      const reviewsContainer = document.getElementById('reviews-container');

      // Show/hide based on whether there are reviews
      if (data.totalReviews === 0) {
        if (noReviewsMessage) noReviewsMessage.style.display = 'block';
        if (reviewsContainer) reviewsContainer.style.display = 'none';

        // Hide the summary section when there are no reviews
        const reviewsSummary = document.querySelector('.reviews-summary');
        if (reviewsSummary) reviewsSummary.style.display = 'none';
      } else {
        if (noReviewsMessage) noReviewsMessage.style.display = 'none';
        if (reviewsContainer) reviewsContainer.style.display = 'block';

        const reviewsSummary = document.querySelector('.reviews-summary');
        if (reviewsSummary) reviewsSummary.style.display = 'flex';

        // Update rating display
        const formattedRating = data.averageRating?.toFixed(2);
        if (starsElement) starsElement.innerHTML = generateStars(data.averageRating);
        if (ratingNumberElement) ratingNumberElement.textContent = `${formattedRating} out of 5`;
        if (reviewCountElement) reviewCountElement.textContent = `Based on ${data.totalReviews} reviews`;

        // Update rating bars
        const ratingCounts = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };

        if (data.reviews && Array.isArray(data.reviews)) {
          data.reviews.forEach((review) => {
            const rating = review.rating;
            if (rating >= 1 && rating <= 5) {
              ratingCounts[rating]++;
            }
          });
        }

        for (let i = 5; i >= 1; i--) {
          const index = 5 - i;
          const percentage = data.totalReviews > 0 ? (ratingCounts[i] / data.totalReviews) * 100 : 0;

          if (ratingBars && ratingBars[index]) {
            const progressBar = ratingBars[index].querySelector('.progress-bar');
            const countElement = ratingBars[index].querySelector('.rating-count');
            if (progressBar) progressBar.style.width = `${percentage}%`;
            if (countElement) countElement.textContent = ratingCounts[i];
          }
        }
      }
    }

    function generateStars(rating) {
      let starsHTML = '';
      const roundedRating = Math.round(rating || 0);

      for (let i = 1; i <= 5; i++) {
        starsHTML += i <= roundedRating ? '‚òÖ' : '‚òÜ';
      }

      return starsHTML;
    }

    function renderReviews(reviews) {
      // Get fresh reference to reviews container
      const reviewsContainer = document.getElementById('reviews-container');

      if (!reviewsContainer) {
        console.warn('Reviews container not found');
        return;
      }

      try {
        reviewsContainer.innerHTML = '';

        if (!reviews || !Array.isArray(reviews)) {
          console.warn('Invalid reviews data');
          return;
        }

        reviews.forEach((review) => {
          const reviewElement = document.createElement('div');
          reviewElement.className = 'review-item';

          // Create review HTML structure
          reviewElement.innerHTML = `
            <div class="review-header">
              <div class="review-author">${review.name || 'Anonymous'}</div>
              <div class="review-rating">${generateStars(review.rating)}</div>
            </div>
            <div class="review-content">
              <p>${review.message || ''}</p>
            </div>
            <div class="review-date">${
              review.createdAt ? new Date(review.createdAt).toLocaleDateString() : new Date().toLocaleDateString()
            }</div>
            ${review.recommend ? `<div class="review-recommend">Recommends this product</div>` : ''}
          `;

          reviewsContainer.appendChild(reviewElement);
        });
      } catch (error) {
        console.error('Error rendering reviews:', error);
      }
    }
  });
</script>
