{% assign avg_rating = block.settings.product.metafields.demo.avg_rating.value | round %}
{% assign access_token = shop.metafields.accesstoken.token %}
{% assign block_id = shop.metafields.blockID.blockID %}

<span class="main_block_listing">
  {% render 'stars', rating: avg_rating %}
  {% render 'review-listing', rating: avg_rating %}
</span>

<script>
  const themeIdElement = document.querySelector('.main_block_listing');
  var accessToken = '{{ access_token }}';

  function getCurrentThemeId() {
    const themeIdFromDOM = Shopify && Shopify.theme && Shopify.theme.id;

    if (themeIdFromDOM) return themeIdFromDOM;

    return fetchActiveThemeId();
  }

  async function fetchActiveThemeId() {
    const getActiveThemeQuery = `query {
      themes(first: 20) {
        edges {
          node {
            id
            name
            role
          }
        }
      }
    }`;

    const themeData = await fetchGraphQL(getActiveThemeQuery);
    if (!themeData || !themeData.data) return null;

    const activeTheme = themeData.data.themes.edges.find((theme) => theme.node.role === 'MAIN')?.node;
    return activeTheme ? activeTheme.id : null;
  }

  const fetchGraphQL = async (query) => {
    try {
      const response = await fetch('https://{{ shop.domain }}/admin/api/2025-01/graphql.json', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Shopify-Access-Token': accessToken,
        },
        body: JSON.stringify({ query }),
      });
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('GraphQL Fetch Error:', error);
      return null;
    }
  };

  (async () => {
    try {
      const currentThemeId = Shopify && Shopify.theme && Shopify.theme.id;

      if (!currentThemeId) {
        console.error('Could not determine theme ID');
        return;
      }

      const appEmbedQuery = `{
        theme(id: "gid://shopify/OnlineStoreTheme/${currentThemeId}") {
          id
          name
          role
          files(filenames: ["config/settings_data.json"], first: 1) {
            nodes {
              body {
                ... on OnlineStoreThemeFileBodyText {
                  content
                }
              }
            }
          }
        }
      }`;

      const appEmbedData = await fetchGraphQL(appEmbedQuery);

      if (!appEmbedData || !appEmbedData.data || !appEmbedData.data.theme) {
        console.error('Could not fetch theme data');
        return;
      }

      const themeFiles = appEmbedData.data.theme.files;
      if (!themeFiles || !themeFiles.nodes || themeFiles.nodes.length === 0) {
        console.error('No theme files found');
        return;
      }

      const data = themeFiles.nodes[0].body.content;
      if (!data) {
        console.error('No content in settings_data.json');
        return;
      }

      let settingsData;
      try {
        settingsData = JSON.parse(data.substring(data.indexOf('{')));
      } catch (e) {
        console.error('Error parsing settings data:', e);
        return;
      }

      if (!settingsData || !settingsData.current || !settingsData.current.blocks) {
        console.error('Invalid settings data structure');
        return;
      }

      const productSectionBlocks = settingsData.current.blocks;
      const checkDisabled = Object.values(productSectionBlocks).find(
        (item) => item.type && item.type.includes('{{block_id}}')
      )?.disabled;

      const main_block_listing = document.querySelector('.main_block_listing');
      if (checkDisabled && main_block_listing) {
        main_block_listing.innerHTML = '';
      }
    } catch (error) {
      console.error('Error in main execution:', error);
    }
  })();
</script>

{% schema %}
{
  "name": "custom-block",
  "target": "section",
  "settings": []
}
{% endschema %}
